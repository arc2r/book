st_buffer(0.25)
ggplot(circs) +
geom_sf(fill = "blue",alpha = 0.3) +
geom_sf_text(aes(label = id)) +
theme_void()
st_relate(circs,pattern = "2*****")
st_relate(circs,pattern = "2********")
st_relate(circs,pattern = "2********",sparse = FALSE)
st_relate(circs,pattern = "2********")
crossmatrix <- st_relate(circs,pattern = "2********",sparse = FALSE)
crossmatrix
which(crossmatrix,arr.ind = TRUE)
# Remove the diagonals since it's simply each feature tested against itself
diag(crossmatrix) <- FALSE
which(crossmatrix,arr.ind = TRUE)
sparsematrix <- which(crossmatrix,arr.ind = TRUE)
sparsematrix
circs[sparsematrix[,1],]
circsplot <- ggplot(circs) +
geom_sf(fill = "blue",alpha = 0.3) +
geom_sf_text(aes(label = id)) +
theme_void()
circsplot
circsplot +
geom_sf(data = circs[sparsematrix[,1],], fill = "red", alpha = 0.3)
sparsematrix
which(crossmatrix,arr.ind = TRUE)
# sparsematrix <-
which(crossmatrix,arr.ind = TRUE)
# sparsematrix <-
which(crossmatrix,arr.ind = TRUE) %>%
unique()
class(which(crossmatrix,arr.ind = TRUE) )
# sparsematrix <-
which(crossmatrix,arr.ind = TRUE) %>%
as.vector()
# sparsematrix <-
which(crossmatrix,arr.ind = TRUE) %>%
as.vector() %>%
unique()
error <- which(crossmatrix,arr.ind = TRUE) %>%
as.vector() %>%
unique()
circsplot +
geom_sf(data = circs[error,], fill = "red", alpha = 0.3)
shp = system.file("shape/nc.shp", package="sf")
plot(shp = system.file("shape/nc.shp", package="sf")
)
plot(shp)
shp = system.file("shape/nc.shp", package="sf")
plot(shp)
nc = st_read(system.file("shape/nc.shp", package="sf"), quiet = TRUE)
plot(nc)
st_relate(nc,pattern = "********F")
st_union(nc)
st_union(circs)
plot(st_union(circs))
View(st_union(circs))
st_convex_hull(nc)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, warning = FALSE,message = FALSE)
# Chunk 2
library(sf)
library(tidyverse)
edges <- st_multipoint(matrix(c(0,0,8,0,8,8,0,8),ncol = 2,byrow = TRUE))
board <- st_make_grid(edges,n = 8) %>%
st_as_sf() %>%
mutate(
value = rep(c(rep(c(FALSE,TRUE),4),rep(c(TRUE,FALSE),4)),4),
namex = rep(letters[1:8],8),
namey = rep(1:8,each = 8),
name = paste(namex,namey,sep = ""),
i = row_number()
)
chessplot <- ggplot(board) +
geom_sf(aes(fill = value)) +
geom_sf_label(aes(label = i)) +
scale_x_continuous(breaks = 1:8-0.5,labels = letters[1:8]) +
scale_y_continuous(breaks = 1:8-0.5,labels = 1:8) +
scale_fill_manual(values = c("black","white"))+
theme(legend.position = "none",
panel.grid = element_blank(),
panel.background = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank())
chessplot
# Chunk 3
st_touches(board[36,],board)
# Chunk 4
sel36 <- st_touches(board[36,],board)[[1]]
chessplot +
geom_sf(data = board[36,], fill = "blue", alpha = 0.4)+
geom_sf(data = board[sel36,], fill = "red",alpha = 0.4)
# Chunk 5
mat <- matrix(c(0,0,1,0,1,1,0,1,0,0),ncol = 2,byrow = TRUE)
p1 <- st_polygon(list(mat))
p2 <- st_polygon(list(mat+0.5))
p3 <- st_polygon(list(mat-1))
ggplot() +
geom_sf(data = p1, fill = "blue", alpha = 0.4) +
geom_sf(data = p2, fill = "red", alpha = 0.4)+
# geom_sf(data = p3, fill = "green", alpha = 0.4)+
theme_void()
# Chunk 6
p2_ls <- st_cast(p2,"LINESTRING")
p2_ls2 <- st_intersection(p1,p2_ls)
ggplot() +
geom_sf(data = p1, fill = "blue", alpha = 0.4) +
geom_sf(data = p2, fill = "red", alpha = 0.4)+
geom_sf(data = p2_ls2, colour = "yellow", lwd = 2)+
theme_void()
# Chunk 7
p2_ls <- st_cast(p2,"LINESTRING")
p2_ls2 <- st_intersection(p1,p2_ls)
ggplot() +
geom_sf(data = p1, fill = "blue", alpha = 0.4) +
geom_sf(data = p2, fill = "red", alpha = 0.4)+
geom_sf(data = st_difference(p1,p2), fill = "yellow", lwd = 2)+
theme_void()
# Chunk 8
st_relate(board[36,],board,pattern = "F***1****")
# Chunk 9
st_rook = function(a, b = a) st_relate(a, b, pattern = "F***1****")
sel36 <- st_rook(board[36,],board)[[1]]
chessplot +
geom_sf(data = board[36,], fill = "blue", alpha = 0.4)+
geom_sf(data = board[sel36,], fill = "red",alpha = 0.4)
# Chunk 10
st_relate(board[36,],board,pattern = "F***0****")
# Chunk 11
st_bishop <- function(a, b = a) st_relate(a, b, pattern = "F***0****")
sel36 <- st_bishop(board[36,],board)[[1]]
chessplot +
geom_sf(data = board[36,], fill = "blue", alpha = 0.4)+
geom_sf(data = board[sel36,], fill = "red",alpha = 0.4)
# Chunk 12
set.seed(10)
nrows <- 10
circs <- data.frame(
id = 1:nrows,
x = rnorm(nrows),
y = rnorm(nrows)
) %>%
st_as_sf(coords = c(2,3)) %>%
st_buffer(0.25)
# Chunk 13
circsplot <- ggplot(circs) +
geom_sf(fill = "blue",alpha = 0.3) +
geom_sf_text(aes(label = id)) +
theme_void()
circsplot
# Chunk 14
st_relate(circs,pattern = "2********")
# Chunk 15
crossmatrix <- st_relate(circs,pattern = "2********",sparse = FALSE)
crossmatrix[1:6,1:6] # only showing 6 since this prints nicely
# Remove the diagonals since it's simply each feature tested against itself
diag(crossmatrix) <- FALSE
error <- which(crossmatrix,arr.ind = TRUE) %>%
as.vector() %>%
unique()
circsplot +
geom_sf(data = circs[error,], fill = "red", alpha = 0.3)
nc
nc = st_read(system.file("shape/nc.shp", package="sf"), quiet = TRUE)
st_union(nc)
st_cast(st_union(nc),"POLYGON")
nc2 <- st_cast(st_union(nc),"POLYGON")
mutate(nc2,id = 1:n())
nc2 %>%
st_sf()
nc2 <- st_cast(st_union(nc),"POLYGON")%>%
st_sf() %>%
mutate(id = 1:n())
plot(nc2)
ggplot(nc) +
geom_sf8)
ggplot(nc) +
geom_sf()
ggplot(nc) +
geom_sf() +
theme_void()
nc_union
nc_union <- st_union(nc)
nc_union
nc_singlepart <- nc_union %>%
st_cast("POLYGON")%>%
st_sf() %>%
mutate(id = 1:n())
ggplot(nc_singlepart) +
geom_sf(aes(fill = id))
ggplot(nc_singlepart) +
geom_sf(aes(fill = factor(id))) +
theme_void()+
theme(legend.position = "none")
nc_singlepart
ggplot(nc_singlepart) +
geom_sf(aes(fill = factor(id))) +
theme_void()
ggplot(nc_singlepart) +
geom_sf(aes(fill = factor(id))) +
labs(fill = "id") +
theme_void()
nc5 <- nc_singlepart[5,]
plot(nc5)
ggplot(nc5) + geom_sf()
nc5
mp = st_multipolygon(list(pol, pol + 3, pol + c(-3,3)))
p1 <- rbind(c(0,0), c(1,0), c(3,2), c(2,4), c(1,4), c(0,0))
p2 <- rbind(c(1,1), c(1,2), c(2,2), c(1,1))
p3 <- rbind(c(1,2.2), c(1,2.4), c(1.2,2.4), c(1,2.2))
pol <-st_polygon(list(p1,p2,p3))
mp = st_multipolygon(list(pol, pol + 3, pol + c(-3,3)))
plot(mp)
st_multipolygon(lapply(mp, function(x) x[1]))
plot(st_multipolygon(lapply(mp, function(x) x[1])))
lapply(mp, function(x) x[1])
plot(st_multipolygon(lapply(mp, function(x) x[2])))
plot(st_multipolygon(lapply(mp, function(x) x[3])))
plot(st_multipolygon(lapply(mp, function(x) x[4])))
lapply(nc5$geometry)
lapply(nc5$geometry,length)
sapply(nc5$geometry,length)
sapply(nc_union$geometry,length)
nc_union$geometry
nc_union
sapply(nc_singlepart$geometry,length)
# or with purrr:
map_lgl(nc_singlepart$geometry,~length(.x)== 1)
nc_singlepart
st_centroid(nc_singlepart)
holes <- st_centroid(nc_singlepart) %>%
st_buffer(10000)
ggplot(nc_singlepart) + geom_sf() + geom_sf(data = holes)
ggplot(nc_singlepart) + geom_sf() + geom_sf(data = holes, fill = NA)
holes
ggplot(nc_singlepart) + geom_sf()
holes <- st_centroid(nc_singlepart) %>%
st_buffer(100)
ggplot(nc_singlepart) + geom_sf() + geom_sf(data = holes, fill = NA)
holes <- st_centroid(nc_singlepart) %>%
st_buffer(1)
ggplot(nc_singlepart) + geom_sf() + geom_sf(data = holes, fill = NA)
holes <- st_centroid(nc_singlepart) %>%
st_buffer(0.5)
ggplot(nc_singlepart) + geom_sf() + geom_sf(data = holes, fill = NA)
nc_holes <- st_difference(nc_singlepart,holes)
ggplot(nc_holes) + geom_sf()
nc_holes
nc_holes
nc_holes
ggplot(nc_holes) + geom_sf()
nc_holes <- st_difference(holes,nc_singlepart)
ggplot(nc_holes) + geom_sf()
nc_holes <- st_difference(nc_singlepart,holes)
ggplot(nc_holes) + geom_sf()
ggplot(nc_singlepart) + geom_sf()
ggplot(nc_singlepart) + geom_sf() + geom_sf(holes)
ggplot(nc_singlepart) + geom_sf() + geom_sf(data = holes)
holes <- nc_singlepart %>%
st_union() %>%
st_centroid() %>%
st_buffer(0.5)
ggplot(nc_singlepart) + geom_sf() + geom_sf(data = holes)
nc_holes <- st_difference(nc_singlepart,holes)
nc_holes
ggplot(nc_holes) + geom_sf() + geom_sf(data = holes)
ggplot(nc_holes) + geom_sf()
ggplot(nc_holes) + geom_sf() +
theme_void()
ggplot(nc_holes) +
geom_sf() +
theme_void()
holes <- nc_singlepart %>%
st_union() %>%
st_centroid() %>%
st_buffer(0.5)
nc_holes <- st_difference(nc_singlepart,holes)
ggplot(nc_holes) +
geom_sf() +
theme_void()
map_lgl(nc_holes$geometry,~length(.x)== 1)
read_file("06_Topology_Rules/images/")
list.files("06_Topology_Rules/images/")
list.files("06_Topology_Rules/images/") %>% paste("\n")
list.files("06_Topology_Rules/images/") %>% paste("",collapse = ",")
data.frame(x = rnorm(10),y = rnorm(10)) %>%
st_as_sfc(coords = c(1,2))
library(sf)
library(tidyverse)
data.frame(x = rnorm(10),y = rnorm(10)) %>%
st_as_sfc(coords = c(1,2))
data.frame(x = rnorm(10),y = rnorm(10)) %>%
st_as_sf(coords = c(1,2))
mypoints <- data.frame(x = rnorm(10),y = rnorm(10)) %>%
st_as_sf(coords = c(1,2))
plot(mypoints)
mypoints <- data.frame(x = rnorm(100),y = rnorm(100)) %>%
st_as_sf(coords = c(1,2))
plot(mypoints)
tmaptools::smooth_map(mypoints)
ras <- tmaptools::smooth_map(mypoints)
plot(ras)
plot(ras$raster)
ras$raster
library(tmap)
tm_shape(ras$raster) + tm_raster()
ras <- tmaptools::smooth_map(mypoints)
set.seed(10)
mypoints <- data.frame(x = rnorm(100),y = rnorm(100)) %>%
st_as_sf(coords = c(1,2))
plot(mypoints)
mypoints <- data.frame(x = rnorm(100),y = rnorm(100)) %>%
st_as_sf(coords = c(1,2))
# Chunk 1
library(sf)
library(tidyverse)
set.seed(10)
mypoints <- data.frame(x = rnorm(100),y = rnorm(100)) %>%
st_as_sf(coords = c(1,2))
plot(mypoints)
mypoints <- data.frame(x = rnorm(1000),y = rnorm(1000)) %>%
st_as_sf(coords = c(1,2))
plot(mypoints)
my_kde <- function(points,cellsize, bandwith, extent = NULL){
require(MASS)
require(raster)
require(sf)
require(stars)
if(is.null(extent)){
extent_vec <- st_bbox(points)[c(1,3,2,4)]
} else{
extent_vec <- st_bbox(extent)[c(1,3,2,4)]
}
n_y <- ceiling((extent_vec[4]-extent_vec[3])/cellsize)
n_x <- ceiling((extent_vec[2]-extent_vec[1])/cellsize)
extent_vec[2] <- extent_vec[1]+(n_x*cellsize)-cellsize
extent_vec[4] <- extent_vec[3]+(n_y*cellsize)-cellsize
coords <- st_coordinates(points)
matrix <- kde2d(coords[,1],coords[,2],h = bandwith,n = c(n_x,n_y),lims = extent_vec)
raster(matrix)
}
mypoints_kde <- my_kde(mypoints)
plot(mypoints_kde, add = TRUE)
mypoints_kde <- my_kde(mypoints)
mypoints_kde <- my_kde(mypoints,0.05,0.5)
plot(mypoints_kde, add = TRUE)
mypoints_kde <- my_kde(mypoints,0.01,0.5)
plot(mypoints_kde, add = TRUE)
ggplot(mypoints_kde) +
geom_sf()
ggplot(mypoints) +
geom_sf()
library(stars)
ggplot(mypoints) +
geom_sf() +
geom_stars(st_as_stars(mypoints_kde))
ggplot(mypoints) +
geom_sf() +
geom_stars(data = st_as_stars(mypoints_kde))
ggplot() +
geom_stars(data = st_as_stars(mypoints_kde)) +
geom_sf(data = mypoints)
mypoints_kde <- my_kde(mypoints,0.01,1)
ggplot() +
geom_stars(data = st_as_stars(mypoints_kde)) +
geom_sf(data = mypoints) +
scale_fill_viridis_c()
ggplot() +
geom_stars(data = st_as_stars(mypoints_kde)) +
geom_sf(data = mypoints, alpha = 0.2) +
scale_fill_viridis_c()
ggplot() +
geom_stars(data = st_as_stars(mypoints_kde)) +
geom_sf(data = mypoints, alpha = 0.2) +
scale_fill_viridis_c() +
theme_void()
ggplot() +
geom_stars(data = st_as_stars(mypoints_kde)) +
geom_sf(data = mypoints, alpha = 0.2) +
scale_fill_viridis_c() +
labs(fill = "KDE")
ggplot() +
geom_stars(data = st_as_stars(mypoints_kde)) +
geom_sf(data = mypoints, alpha = 0.2) +
scale_fill_viridis_c() +
labs(fill = "KDE") +
theme_void()
ggplot() +
geom_stars(data = st_as_stars(mypoints_kde)) +
geom_sf(data = mypoints, alpha = 0.2, colour = NA) +
scale_fill_viridis_c() +
labs(fill = "KDE") +
theme_void()
ggplot() +
geom_stars(data = st_as_stars(mypoints_kde)) +
geom_sf(data = mypoints, alpha = 0.5, colour = NA) +
scale_fill_viridis_c() +
labs(fill = "KDE") +
theme_void()
ggplot() +
geom_stars(data = st_as_stars(mypoints_kde)) +
geom_sf(data = mypoints, alpha = 0.5, fill = "black", colour = NA) +
scale_fill_viridis_c() +
labs(fill = "KDE") +
theme_void()
ggplot() +
geom_stars(data = st_as_stars(mypoints_kde)) +
geom_sf(data = mypoints, alpha = 0.5, fill = "black") +
scale_fill_viridis_c() +
labs(fill = "KDE") +
theme_void()
ggplot() +
geom_stars(data = st_as_stars(mypoints_kde)) +
geom_sf(data = mypoints, alpha = 0.2, fill = "black") +
scale_fill_viridis_c() +
labs(fill = "KDE") +
theme_void()
points
nc <- st_read(system.file("shape/nc.shp", package="sf"), quiet = TRUE)
nc_union <- st_union(nc)
nc <- st_read(system.file("shape/nc.shp", package="sf"), quiet = TRUE)
nc_union <- st_union(nc)
st_sample(nc_union,1000)
points <- st_sample(nc_union,1000)
thiessen <- st_voronoi(st_union(points))
plot(thiessen)
thiessen
thiessen <- st_cast(thiessen)
plot(thiessen)
thiessen_clip <- st_intersection(thiessen,nc_union)
plot(thiessen_clip)
points
st_sf(points)
st_sf(points) %>%
mutate(val = rnorm(1000))
points <- st_sf(points) %>%
mutate(val = rnorm(1000))
points <- nc_union %>%
st_sample(1000) %>%
st_sf() %>%
mutate(val = rnorm(1000))
ggplot() +
geom_sf(data = nc) +
geom_sf(data = thiessen_clip, fill = NA)
thiessen <- st_intersection(thiessen,nc_union)
ggplot() +
geom_sf(data = nc) +
geom_sf(data = thiessen, fill = NA)
ggplot() +
geom_sf(data = nc) +
geom_sf(data = thiessen, fill = NA) +
theme_void()
ggplot() +
geom_sf(data = nc) +
geom_sf(data = thiessen, fill = NA) +
geom_sf(data = points, aes(colour = val)) +
theme_void()
st_as_sf(thiessenpolygone_clip)
st_as_sf(thiessen)
thiessen
thiessen <- st_as_sf(thiessen)
thiessen <- st_join(thiessen,points)
thiessen
ggplot() +
geom_sf(data = thiessen, aes(fill = val)) +
scale_fill_viridis_c() +
theme_void()
ggplot() +
geom_sf(data = thiessen, aes(fill = val)) +
geom_sf(data = points) +
scale_fill_viridis_c() +
theme_void()
nc <- st_read(system.file("shape/nc.shp", package="sf"), quiet = TRUE)
nc_union <- st_union(nc)
points <- nc_union %>%
st_sample(1000) %>%
st_sf() %>%
mutate(val = rnorm(1000))
thiessen <- st_voronoi(st_union(points))
thiessen <- st_cast(thiessen)
thiessen <- st_intersection(thiessen,nc_union)
ggplot() +
geom_sf(data = nc) +
geom_sf(data = thiessen, fill = NA) +
geom_sf(data = points, aes(colour = val)) +
theme_void()
thiessen <- st_as_sf(thiessen)
thiessen <- st_join(thiessen,points)
ggplot() +
geom_sf(data = thiessen, aes(fill = val)) +
geom_sf(data = points) +
scale_fill_viridis_c() +
theme_void()
meus
my_krige <- function(groundtruth,column,cellsize, nmax = Inf, maxdist = Inf, idp = 2, extent = NULL){
require(gstat)
require(sf)
require(raster)
if(is.null(extent)){
extent <- groundtruth
}
samples <- st_make_grid(extent,cellsize,what = "centers") %>% st_as_sf()
my_formula <- formula(paste(column,"~1"))
idw_sf <- gstat::krige(formula = my_formula,groundtruth,newdata = samples,nmin = 1, maxdist = maxdist, idp = idp)
idw_matrix <- cbind(st_coordinates(idw_sf),idw_sf$var1.pred)
ras <- raster::rasterFromXYZ(idw_matrix)
if(all(grepl("polygon",st_geometry_type(extent),ignore.case = TRUE))){
ras <- raster::mask(ras,st_as_sf(st_zm(extent)))
}
ras
}
