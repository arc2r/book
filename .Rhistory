data("kantonsgebiet")
# Selecting the Canton of Zug
zug <- filter(kantonsgebiet, kantonsgebiet$name == "Zug") # depicting the Canton of Zug
ggplot(zug) + geom_sf() # depicting the Canton of Zug
library(ggplot2)
data("kantonsgebiet")
# Selecting the Canton of Zug
zug <- filter(kantonsgebiet, kantonsgebiet$name == "Zug") # depicting the Canton of Zug
ggplot(zug) + geom_sf() # depicting the Canton of Zug
# Selecting the Canton of Zürich
zurich <- filter(kantonsgebiet, kantonsgebiet$name == "Zürich")
ggplot(zurich) + geom_sf() # depicting the Canton of Zurich
# merging the two sf objects
merged <- rbind(zug,zurich)
ggplot(merged) + geom_sf() # depicting the product of the merge operation
# The study area from the previous example
head(kantonsgebiet)
# Merging the four areas into one
kantonsgebiet_merged <- st_union(kantonsgebiet)
head(kantonsgebiet_merged)
# Plot the merged area of interest
ggplot(kantonsgebiet_merged) + geom_sf()
ggplot(kantonsgebiet) + geom_sf()
# Plot the merged area of interest
ggplot(kantonsgebiet_merged) + geom_sf()
# The study area from the previous example
head(kantonsgebiet)
ggplot(kantonsgebiet) + geom_sf()
# Dissolving all the cantons into one unified area
kantonsgebiet_dissolved <- st_union(kantonsgebiet)
head(kantonsgebiet_dissolved)
# Plot the merged area of interest
ggplot(kantonsgebiet_dissolved) + geom_sf()
data("kantonsgebiet")
# Selecting the Canton of Zug
zug <- filter(kantonsgebiet, kantonsgebiet$name == "Zug") # depicting the Canton of Zug
ggplot(zug) + geom_sf() # depicting the Canton of Zug
# Selecting the Canton of Zürich
zurich <- filter(kantonsgebiet, kantonsgebiet$name == "Zürich")
ggplot(zurich) + geom_sf() # depicting the Canton of Zurich
# merging the two sf objects
merged <- rbind(zug,zurich)
ggplot(merged) + geom_sf() # depicting the product of the merge operation
# The study area from the previous example
head(kantonsgebiet)
ggplot(kantonsgebiet) + geom_sf() # depicting all the 26 Cantons of Switzerland
# Dissolving all the cantons into one unified area
kantonsgebiet_dissolved <- st_union(kantonsgebiet)
head(kantonsgebiet_dissolved)
# Plot the dissolved output
ggplot(kantonsgebiet_dissolved) + geom_sf()
library(arc2r)
library(sf)
library(ggplot2)
library(dplyr)
# Read the dataset depicting the districts (Bezirke) in the country of Switzerland
data("bezirke")
# sort the dataset based on the Area in ascending order
bezirke_asc <- bezirke[order(bezirke$area_km2),]
head(bezirke_asc)
# sort the dataset based on the Area in descending order
bezirke_desc <- bezirke[order(-bezirke$area_km2),]
head(bezirke_desc)
# sort the dataset based on the Area in ascending order
bezirke_arrange_asc <- arrange(bezirke,area_km2) # by default the function sorts in ascendind order
head(bezirke_arrange_asc)
# sort the dataset based on the Area in descending order
bezirke_arrange_desc <- arrange(bezirke,-area_km2)
head(bezirke_arrange_desc)
# Using the dataset that depicts all the 26 Cantons of Switzerland
data("kantonsgebiet")
# Selecting the Canton of Zug
zug <- filter(kantonsgebiet, kantonsgebiet$name == "Zug") # depicting the Canton of Zug
ggplot(zug) + geom_sf() # depicting the Canton of Zug
# Selecting the Canton of Zürich
zurich <- filter(kantonsgebiet, kantonsgebiet$name == "Zürich")
ggplot(zurich) + geom_sf() # depicting the Canton of Zurich
# merging the two sf objects
merged <- rbind(zug,zurich)
ggplot(merged) + geom_sf() # depicting the product of the merge operation
# The study area from the previous example
head(kantonsgebiet)
ggplot(kantonsgebiet) + geom_sf() # depicting all the 26 Cantons of Switzerland
# Dissolving all the cantons into one unified area
kantonsgebiet_dissolved <- st_union(kantonsgebiet)
head(kantonsgebiet_dissolved)
# Plot the dissolved output
ggplot(kantonsgebiet_dissolved) + geom_sf()
test <- duplicated(kantonsge)
test <- duplicated(kantonsgebiet)
test <- kantonsgebiet[duplicated(kantonsgebiet)])
test <- kantonsgebiet[duplicated(kantonsgebiet)]
kantonsgebiet
?st_equals
duplicated(kantonsgebiet)
g = st_sfc(st_point(1:2), st_point(3:4))
class(g)
ggplot(g) + geom_sf()
library(raster)
source("R/before_chapter.R", local = knitr::knit_global())
source("R/before_chapter.R", local = knitr::knit_global())
data("swissAlti3D")
library(arc2r)
data("swissAlti3D")
force(swissAlti3D)
data("swissAlti3D")
swissalti3d
swissAlti3D
plot(swissAlti3D)
swissAlti3D <- raster("sample_data/swissalti3D/SWISSALTI3D_10_TIFF_CHLV95_LN02_2600_1196.tif")
swissAlti3D
plot(swissAlti3D)
library(arc2r)
library(sf)
library(raster)
plot(gemeinde_zh["bezirksnam"])
plot(swissAlti3D)
library(ggplot2)
ggplot(gemeinde_zh) +
geom_sf()
ggplot(gemeinde_zh) +
geom_sf(aes(fill = bezirksnam))
ggplot(gemeinde_zh) +
geom_sf(aes(fill = bezirksnam)) +
coord_sf(datum = 2056)
ggplot(gemeinde_zh) +
geom_sf(aes(fill = bezirksnam), colour = "white") +
labs(title = "Gemeinden des Kantons Zürich nach Bezirk",fill = "") +
theme_void() +
theme(legend.position = "bottom")
swissAlti3D_df <- as.data.frame(swissAlti3D,xy = TRUE) # xy = TRUE adds the x and y coordinates to our dataframe as columns
swissAlti3D_df <- as.data.frame(swissAlti3D,xy = TRUE) # xy = TRUE adds the x and y coordinates to our dataframe as columns
ggplot(swissAlti3D_df, aes(x, y, fill = SWISSALTI3D_10_TIFF_CHLV95_LN02_2600_1196)) +
geom_raster() +
scale_fill_viridis_c() +
theme_void() +
coord_equal() +
theme(legend.position = "bottom")
library(tmap)
tmap_mode("plot") # <- to create static plots
tm_shape(gemeinde_zh) +
tm_polygons(col = "bezirksnam")
library(arc2r)
library(sf)
library(raster)
plot(gemeinde_zh["bezirksnam"])
plot(swissAlti3D)
swissAlti3D_df <- as.data.frame(swissAlti3D,xy = TRUE) # xy = TRUE adds the x and y coordinates to our dataframe as columns
# Note the column names of our dataframe
head(swissAlti3D_df)
swissAlti3D
swissAlti3D_df <- as.data.frame(swissAlti3D,xy = TRUE) # xy = TRUE adds the x and y coordinates to our dataframe as columns
as.data.frame(swissAlti3D)
knitr::include_graphics("images/selection.jpg")
knitr::include_graphics("images/selection.jpg")
library(sf)
library(ggplot2)
library(sf)
library(ggplot2)
data("veloparkierungsanlagen_zh")
force(veloparkierungsanlagen_zh)
library(dplyr)
parkBikes_winti <- filter(veloparkierungsanlagen_zh,GEMEINDE == "Winterthur")
ggplot() + geom_sf(data = veloparkierungsanlagen_zh) + geom_sf(data = parkBikes_winti, fill = "red", aes(color = "Bike parking spots in Winterthur")) + ggtitle("Bike parking facilities in Canton Zurich") + theme_minimal() + labs(color = " ") + theme(legend.position = "bottom")
ggplot() + geom_sf(data = veloparkierungsanlagen_zh) + geom_sf(data = parkBikes_winti, fill = "red", aes(color = "Bike parking spots in Winterthur")) + ggtitle("Bike parking facilities in Canton Zurich") + theme_minimal() + labs(color = " ") + theme(legend.position = "bottom") + st_coordinates(datum = 2056)
ggplot() + geom_sf(data = veloparkierungsanlagen_zh) + geom_sf(data = parkBikes_winti, fill = "red", aes(color = "Bike parking spots in Winterthur")) + ggtitle("Bike parking facilities in Canton Zurich") + theme_minimal() + labs(color = " ") + theme(legend.position = "bottom") + coord_sf(datum = 2056)
ggplot() + geom_sf(data = veloparkierungsanlagen_zh) + geom_sf(data = parkBikes_winti, fill = "red", aes(color = "Bike parking spots in Winterthur")) + ggtitle("Bike parking facilities in Canton Zurich") + theme_minimal() + labs(color = " ") + theme(legend.position = "bottom") + coord_sf(datum = 2056,label_axes = waiver())
ggplot() + geom_sf(data = veloparkierungsanlagen_zh) + geom_sf(data = parkBikes_winti, fill = "red", aes(color = "Bike parking spots in Winterthur")) + ggtitle("Bike parking facilities in Canton Zurich") + labs(color = " ") + theme(legend.position = "bottom") + coord_sf(datum = 2056)
ggplot() + geom_sf(data = veloparkierungsanlagen_zh) + geom_sf(data = parkBikes_winti, fill = "red", aes(color = "Bike parking spots in Winterthur")) + ggtitle("Bike parking facilities in Canton Zurich") + labs(color = " ") + theme(legend.position = "bottom", axis.text.x = element_text(angle=90, hjust=1)) + coord_sf(datum = 2056)
ggplot() + geom_sf(data = veloparkierungsanlagen_zh) + geom_sf(data = parkBikes_winti, fill = "red", aes(color = "Bike parking spots in Winterthur")) + ggtitle("Bike parking facilities in Canton Zurich") + labs(color = " ") + theme(legend.position = "right", axis.text.x = element_text(angle=90, hjust=1)) + coord_sf(datum = 2056)
knitr::include_graphics("images/selectAttr.png")
knitr::include_graphics("images/selectAttr.png")
knitr::opts_chunk$set(warning = F, message = F, tidy = T)
library(dplyr)
library(sf)
library(ggplot2)
# Minicipalities (Gemeinde) in Canton Zurich
data("gemeinde_zh")
# "Swimming" spots in the Canton of Zurich
data("badeplaetze_zh")
knitr::opts_chunk$set(warning = F, message = F, tidy = T)
library(dplyr)
library(sf)
library(ggplot2)
# Municipality (Gemeinde) of Richterswil
richterswil <- filter(gemeinde_zh, gemeindena == "Richterswil")
names(richterswil)[5] = "Municipality"
ggplot() + geom_sf(data = gemeinde_zh) + geom_sf(data = richterswil,aes(fill = Municipality)) + geom_sf(data = badeplaetze_zh,color = "blue") + ggtitle("Swimming spots in the Canton of Zurich") + theme_minimal()
ggplot() + geom_sf(data = gemeinde_zh) + geom_sf(data = richterswil,aes(fill = Municipality)) + geom_sf(data = badeplaetze_zh,color = "blue") + ggtitle("Swimming spots in the Canton of Zurich") + theme_minimal() + coord_sf(datum = 2056)
swimmSpots_richt <- swimmSpots[richterswil, ,op = st_within]
swimmSpots_richt <- badeplaetze_zh[richterswil, ,op = st_within]
ggplot() + geom_sf(data = gemeinde_zh) + geom_sf(data = badeplaetze_zh,color = "blue") + geom_sf(data = richterswil, fill = "white") + geom_sf(data = swimmSpots_richt, color = "red") + ggtitle("Swimming spots in the Canton of Zurich") + theme_minimal() + coord_sf(datum = 2056)
library(arc2r)
library(sf)
library(ggplot2)
library(dplyr)
# Read the dataset depicting the districts (Bezirke) in the country of Switzerland
data("bezirke")
# sort the dataset based on the Area in ascending order
bezirke_asc <- bezirke[order(bezirke$area_km2),]
head(bezirke_asc)
# sort the dataset based on the Area in descending order
bezirke_desc <- bezirke[order(-bezirke$area_km2),]
head(bezirke_desc)
# sort the dataset based on the Area in ascending order
bezirke_arrange_asc <- arrange(bezirke,area_km2) # by default the function sorts in ascendind order
head(bezirke_arrange_asc)
# sort the dataset based on the Area in descending order
bezirke_arrange_desc <- arrange(bezirke,-area_km2)
head(bezirke_arrange_desc)
# Using the dataset that depicts all the 26 Cantons of Switzerland
data("kantonsgebiet")
# Selecting the Canton of Zug
zug <- filter(kantonsgebiet, kantonsgebiet$name == "Zug") # depicting the Canton of Zug
ggplot(zug) + geom_sf() # depicting the Canton of Zug
# Selecting the Canton of Zürich
zurich <- filter(kantonsgebiet, kantonsgebiet$name == "Zürich")
ggplot(zurich) + geom_sf() # depicting the Canton of Zurich
# merging the two sf objects
merged <- rbind(zug,zurich)
ggplot(merged) + geom_sf() # depicting the product of the merge operation
# The study area from the previous example
head(kantonsgebiet)
ggplot(kantonsgebiet) + geom_sf() # depicting all the 26 Cantons of Switzerland
# Dissolving all the cantons into one unified area
kantonsgebiet_dissolved <- st_union(kantonsgebiet)
head(kantonsgebiet_dissolved)
# Plot the dissolved output
ggplot(kantonsgebiet_dissolved) + geom_sf()
data("bezirke")
st_crs(bezirke)
st_crs(bezirke) <- 2056
bezirke
plot(bezirke["area_km2"], axes = TRUE)
bezirke_wgs84 <- st_transform(bezirke, 4326)
plot(bezirke_wgs84["area_km2"], axes = TRUE)
st_crs(bezirke)
bezirke_swiss <- st_transform(bezirke, 2056)
# retrieve the coordinate system
st_crs(bezirke_swiss)
# Dataset derived from the spatial interpolation of all the available "recycling points"
# in the city of Wädenwil
data("recycling_raster")
# Dataset representing the public transport quality in the city of Wädenswil
data("are_waedenswil")
force(are_waedenswil)
plot(are_waedenswil,las=1,
main = "Quality of public transport in the city of Wädenwil - CRS: WGS84",
cex.main=1,font.main=4)
# Plot the raster dataset - World Geodetic System 1984
plot(publicTransport["KLASSE"],las=1,
main = "Quality of public transport in the city of Wädenwil - CRS: WGS84",
cex.main=1,font.main=4)
# Plot the raster dataset - World Geodetic System 1984
plot(are_waedenswil,las=1,
main = "Quality of public transport in the city of Wädenwil - CRS: WGS84",
cex.main=1,font.main=4)
ggplot(are_waedenswil) + geom_raster()
ggplot(are_waedenswil) + geom_stars()
publicTransport <- raster("sample_data/Raster/publicTransport_waedi.tif") # CRS -> WGS84
publicTransport <- raster("sample_data/Raster/publicTransport_waedi.tif") # CRS -> WGS84
# Plot the raster dataset - World Geodetic System 1984
plot(publicTransport,las=1,
main = "Quality of public transport in the city of Wädenwil - CRS: WGS84",
cex.main=1,font.main=4)
# Dataset representing the public transport quality in the city of Wädenswil
arc2r::are_waedenswil
names(are_waedenswil)
plot(are_waedenswil["geometry"])
plot(are_waedenswil["KLASSE"])
# Plot the raster dataset - World Geodetic System 1984
plot(publicTransport,las=1,
main = "Quality of public transport in the city of Wädenwil - CRS: WGS84",
cex.main=1,font.main=4)
plot(are_waedenswil["KLASSE"])
plot(are_waedenswil["KLASSE"],las=1,
main = "Quality of public transport in the city of Wädenwil - CRS: WGS84",
cex.main=1,font.main=4)
plot(are_waedenswil["KLASSE"],las=1,
plot(are_waedenswil["KLASSE"])
class(are_waedenswil)
ggplot(are_waedenswil["KLASSE"]) + geom_sf()
ggplot(are_waedenswil["KLASSE"]) + geom_sf(aes(fill = KLASSE))
# Plot the raster dataset - World Geodetic System 1984
ggplot(are_waedenswil["KLASSE"]) + geom_sf(aes(fill = KLASSE))
ggplot(are_waedenswil["KLASSE"]) + geom_sf(aes(fill = KLASSE))
# Plot the raster dataset - World Geodetic System 1984
ggplot(are_waedenswil["KLASSE"]) + geom_sf(aes(fill = KLASSE)) + theme_minimal()
ggplot(are_waedenswil["KLASSE"]) + geom_sf(aes(fill = KLASSE)) + ggtitle("Quality of public transport in the city of Wädenwil - CRS: WGS84")
ggplot(are_waedenswil["KLASSE"]) + geom_sf(aes(fill = KLASSE)) + ggtitle("Quality of public transport in the city of Wädenwil - CRS: WGS84") + theme(plot.title = element_text(size = 12, face = "bold"))
ggplot(are_waedenswil["KLASSE"]) + geom_sf(aes(fill = KLASSE)) + ggtitle("Quality of public transport in the city of Wädenwil - CRS: WGS84") + theme(plot.title = element_text(size = 9, face = "bold"))
ggplot(are_waedenswil["KLASSE"]) + geom_sf(aes(fill = KLASSE)) + ggtitle("Quality of public transport in the city of Wädenwil - CRS: WGS84") + theme(plot.title = element_text(size = 9, face = "bold")) + theme_dark()
ggplot(are_waedenswil["KLASSE"]) + geom_sf(aes(fill = KLASSE)) + ggtitle("Quality of public transport in the city of Wädenwil - CRS: WGS84") + theme(plot.title = element_text(size = 9, face = "bold")) + theme_minimal()
ggplot(are_waedenswil["KLASSE"]) + geom_sf(aes(fill = KLASSE)) + ggtitle("Quality of public transport in the city of Wädenwil - CRS: WGS84") + theme(plot.title = element_text(size = 9, face = "bold"))
# Transform the coordinate system of the raster dataset publicTransport_CH
# into the Swiss Coordinate system - CH1903+LV95
publicTransport_CH = projectRaster(are_waedenswil, recycling_raster)
publicTransport <- raster("sample_data/Raster/publicTransport_waedi.tif") # CRS -> WGS84
publicTransport <- raster("sample_data/Raster/publicTransport_waedi.tif") # CRS -> WGS84
publicTransport
# Plot the raster dataset - World Geodetic System 1984
plot(publicTransport,las=1,
main = "Quality of public transport in the city of Wädenwil - CRS: WGS84",
cex.main=1,font.main=4)
# Transform the coordinate system of the raster dataset publicTransport_CH
# into the Swiss Coordinate system - CH1903+LV95
publicTransport_CH = projectRaster(publicTransport, recycling_raster)
library(arc2r)
library(sf)
library(raster)
data("bezirke")
st_crs(bezirke)
st_crs(bezirke) <- 2056
bezirke
plot(bezirke["area_km2"], axes = TRUE)
bezirke_wgs84 <- st_transform(bezirke, 4326)
plot(bezirke_wgs84["area_km2"], axes = TRUE)
st_crs(bezirke)
bezirke_swiss <- st_transform(bezirke, 2056)
# retrieve the coordinate system
st_crs(bezirke_swiss)
# Dataset derived from the spatial interpolation of all the available "recycling points"
# in the city of Wädenwil
data("recycling_raster")
# Dataset representing the public transport quality in the city of Wädenswil
publicTransport <- raster("sample_data/Raster/publicTransport_waedi.tif") # CRS -> WGS84
# Plot the raster dataset - World Geodetic System 1984
plot(publicTransport,las=1,
main = "Quality of public transport in the city of Wädenwil - CRS: WGS84",
cex.main=1,font.main=4)
# Transform the coordinate system of the raster dataset publicTransport_CH
# into the Swiss Coordinate system - CH1903+LV95
publicTransport_CH = projectRaster(publicTransport, recycling_raster)
recycling_raster
# Dataset representing the public transport quality in the city of Wädenswil
publicTransport <- raster("sample_data/Raster/publicTransport_waedi.tif") # CRS -> WGS84
plot(publicTransport,las=1,
main = "Quality of public transport in the city of Wädenwil - CRS: WGS84",
cex.main=1,font.main=4)
# Transform the coordinate system of the raster dataset publicTransport_CH
# into the Swiss Coordinate system - CH1903+LV95
publicTransport_CH <- projectRaster(publicTransport, recycling_raster)
projectRaster(publicTransport,recycling_raster)
class(recycling_raster)
class(publicTransport)
raster_recycling <- raster("sample_data/Raster/raster_recycling.tif") # CRS -> CH1903+LV95
# Transform the coordinate system of the raster dataset publicTransport_CH
# into the Swiss Coordinate system - CH1903+LV95
publicTransport_CH <- projectRaster(publicTransport, raster_recycling)
# Transform the coordinate system of the raster dataset publicTransport_CH
# into the Swiss Coordinate system - CH1903+LV95
publicTransport_CH = projectRaster(publicTransport, raster_recycling)
# Dataset derived from the spatial interpolation of all the available "recycling points"
# in the city of Wädenwil
raster_recycling <- raster("sample_data/Raster/raster_recycling.tif") # CRS -> CH1903+LV95
# Dataset representing the public transport quality in the city of Wädenswil
publicTransport <- raster("sample_data/Raster/publicTransport_waedi.tif") # CRS -> WGS84
# Plot the raster dataset - World Geodetic System 1984
plot(publicTransport,las=1,
main = "Quality of public transport in the city of Wädenwil - CRS: WGS84",
cex.main=1,font.main=4)
# Transform the coordinate system of the raster dataset publicTransport_CH
# into the Swiss Coordinate system - CH1903+LV95
publicTransport_CH = projectRaster(publicTransport, raster_recycling)
# Plot the raster dataset - Swiss Coordinate System CH1903+LV95
plot(publicTransport_CH,las=1,
main = "Quality of public transport in the city of Wädenwil - CRS: CH1903+LV95",
cex.main=1,font.main=4)
# Dataset derived from the spatial interpolation of all the available "recycling points"
# in the city of Wädenwil
data("recycling_raster")
# Dataset representing the public transport quality in the city of Wädenswil
publicTransport <- raster("sample_data/Raster/publicTransport_waedi.tif") # CRS -> WGS84
library(raster)
library(stars)
library(sf)
library(dplyr)
library(stars)
data("are_waedenswil")
data("are_waedenswil")
data("recycling_raster")
plot(recycling_raster)
plot(are_waedenswil, alpha = 0.5, add = TRUE)
recycle_Waedi_clip <- mask(recycling_raster,are_waedenswil)
library(arc2r)
library(sf)
library(tidyverse)
library(raster)
library(arc2r)
library(sf)
library(tidyverse)
library(raster)
set.seed(10)
mypoints <- data.frame(x = rnorm(1000),y = rnorm(1000)) %>%
st_as_sf(coords = c(1,2))
plot(mypoints)
my_kde <- function(points,cellsize, bandwith, extent = NULL){
require(MASS)
require(raster)
require(sf)
if(is.null(extent)){
extent_vec <- st_bbox(points)[c(1,3,2,4)]
} else{
extent_vec <- st_bbox(extent)[c(1,3,2,4)]
}
n_y <- ceiling((extent_vec[4]-extent_vec[3])/cellsize)
n_x <- ceiling((extent_vec[2]-extent_vec[1])/cellsize)
extent_vec[2] <- extent_vec[1]+(n_x*cellsize)-cellsize
extent_vec[4] <- extent_vec[3]+(n_y*cellsize)-cellsize
coords <- st_coordinates(points)
matrix <- kde2d(coords[,1],coords[,2],h = bandwith,n = c(n_x,n_y),lims = extent_vec)
raster(matrix)
}
mypoints_kde <- my_kde(mypoints,0.01,1)
library(stars)
ggplot() +
geom_stars(data = st_as_stars(mypoints_kde)) +
geom_sf(data = mypoints, alpha = 0.2, fill = "black") +
scale_fill_viridis_c() +
labs(fill = "KDE") +
theme_void()
# Importing a raster dataset
# swissALTI3D2019.tif -- Source: https://geovite.ethz.ch
data("swissAlti3D")
# Importing a raster dataset
# swissALTI3D2019.tif -- Source: https://geovite.ethz.ch
data("swissAlti3D")
plot(swissAlti3D,
main = "swissALTI3D2019 - CRS: CH1903+LV95",
cex.main=1,font.main=4)
# Computing the slope of a raster dataset using the terrain() function
swissAlti3d_slope <- terrain(swissAlti3D, opt="slope", unit="degrees")
# Computing the slope of a raster dataset using the terrain() function
swissAlti3d_slope <- terrain(data("swissAlti3D"), opt="slope", unit="degrees")
# Importing a raster dataset
# swissALTI3D2019.tif -- Source: https://geovite.ethz.ch
data("swissAlti3D")
swissAlti3d <- raster("sample_data/Raster/swissALTI3D2019.tif")
swissAlti3d <- raster("sample_data/Raster/swissALTI3D2019.tif")
plot(swissAlti3d,
main = "swissALTI3D2019 - CRS: CH1903+LV95",
cex.main=1,font.main=4)
library(arc2r)
library(sf)
library(tidyverse)
library(raster)
swissAlti3d <- raster("sample_data/Raster/swissALTI3D2019.tif")
plot(swissAlti3d,
main = "swissALTI3D2019 - CRS: CH1903+LV95",
cex.main=1,font.main=4)
View(swissAlti3d)
plot(swissAlti3D,
main = "swissALTI3D2019 - CRS: CH1903+LV95",
cex.main=1,font.main=4)
# Computing the slope of a raster dataset using the terrain() function
swissAlti3d_slope <- terrain(swissAlti3d, opt="slope", unit="degrees")
# Computing the slope of a raster dataset using the terrain() function
swissAlti3d_slope <- terrain(swissAlti3D, opt="slope", unit="degrees")
library(arc2r)
library(sf)
library(tidyverse)
library(raster)
swissAlti3d <- raster("sample_data/Raster/swissALTI3D2019.tif")
plot(swissAlti3d,
main = "swissALTI3D2019 - CRS: CH1903+LV95",
cex.main=1,font.main=4)
swissAlti3d_slope <- terrain(swissAlti3d, opt="slope", unit="degrees")
plot(swissAlti3d_slope,
main = "Slope of swissALTI3D2019 in degrees (°)",
cex.main=1,font.main=4)
swissAlti3d_aspect <- terrain(swissAlti3d, opt="aspect", unit="degrees")
plot(swissAlti3d_aspect,
main = "Aspect of swissALTI3D2019 in degrees (°)",
cex.main=1,font.main=4)
library(arc2r)
library(sf)
library(tidyverse)
library(raster)
# Importing a raster dataset
# swissALTI3D2019.tif -- Source: https://geovite.ethz.ch
data("swissAlti3D")
plot(swissAlti3D,
main = "swissALTI3D2019 - CRS: CH1903+LV95",
cex.main=1,font.main=4)
# Computing the slope of a raster dataset using the terrain() function
swissAlti3d_slope <- terrain(swissAlti3D, opt="slope", unit="degrees")
plot(swissAlti3d_slope,
main = "Slope of swissALTI3D2019 in degrees (°)",
cex.main=1,font.main=4)
swissAlti3d_aspect <- terrain(swissAlti3D, opt="aspect", unit="degrees")
plot(swissAlti3d_aspect,
main = "Aspect of swissALTI3D2019 in degrees (°)",
cex.main=1,font.main=4)
summary(swissAlti3d_aspect)
histinfo <- hist(swissAlti3d_aspect)
histinfo$breaks
reclass_df <- c(0,90,1,90,180,2,180,270,3,270,360,4)
# convert to Matrix
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
reclass_m
swissAlti3d_aspect_reclass <- reclassify(swissAlti3d_aspect,
reclass_m)
plot(swissAlti3d_aspect_reclass, col = c("red", "green", "yellow","blue"),
main = "Aspect of swissALTI3D2019 in 4 classes",
cex.main=1,font.main=4, legend = FALSE)
legend("topright",
legend = c("0°-90°", "90°-180°", "180°-270°","270°-360°"),
fill = c("red", "blue", "green", "yellow"),
border = FALSE,
bty = "n") # turn off legend border
