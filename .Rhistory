reclass_m)
reclass_m <- matrix(as.factor(reclass_df),
ncol = 3,
byrow = TRUE)
reclass_m
swissAlti3d_aspect_reclass <- reclassify(swissAlti3d_aspect,
reclass_m)
# create a reclassification matrix
reclass_df <- c(0,180, 000000 ,180,360, 99999)
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
swissAlti3d_aspect_reclass <- reclassify(swissAlti3d_aspect,
reclass_m)
swissAlti3d_aspect_reclass
plot(swissAlti3d_aspect_reclass)
# create a reclassification matrix
reclass_df <- c(0,90,0000,90,180,1111,189,360,9999)
# convert to Matrix
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
swissAlti3d_aspect_reclass <- reclassify(swissAlti3d_aspect,
reclass_m)
# Importing a raster dataset
# swissALTI3D2019.tif -- Source: https://geovite.ethz.ch
library(raster)
swissAlti3d <- raster("sample_data/Raster/swissALTI3D2019.tif")
plot(swissAlti3d,
main = "swissALTI3D2019 - CRS: CH1903+LV95",
cex.main=1,font.main=4)
# Computing the slope of a raster dataset using the terrain() function
swissAlti3d_slope <- terrain(swissAlti3d, opt="slope", unit="degrees")
plot(swissAlti3d_slope,
main = "Slope of swissALTI3D2019 in degrees (°)",
cex.main=1,font.main=4)
# Computing the aspect of the terrain dataset
swissAlti3d_aspect <- terrain(swissAlti3d, opt="aspect", unit="degrees")
plot(swissAlti3d_aspect,
main = "Aspect of swissALTI3D2019 in degrees (°)",
cex.main=1,font.main=4)
summary(swissAlti3d_aspect)
histinfo <- hist(swissAlti3d_aspect)
histinfo$counts
histinfo$breaks
# hist(swissAlti3d_aspect,
#      breaks = c(0, 22.5, 112.5, 202.5, 292.5, 360),
#      main = "Histogram with custom breaks",
#      xlab = "Aspect in Degrees °" )
# create a reclassification matrix
reclass_df <- c(0,90,0000,90,180,1111,189,360,9999)
# convert to Matrix
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
reclass_m
# create a reclassification matrix
reclass_df <- c(0,90,0000,90,180,1111,180,360,9999)
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
reclass_m
# create a reclassification matrix
reclass_df <- c(0,90,0000,90,180,9999)
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
reclass_m <- matrix(reclass_df,
ncol = 2,
byrow = TRUE)
reclass_m
# create a reclassification matrix
reclass_df <- c(0,180, 000000 ,180,360, 99999)
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
reclass_m
# create a reclassification matrix
reclass_df <- c(0,180, 000000 ,180,270, 333333, 270,360, 99999)
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
reclass_m
swissAlti3d_aspect_reclass <- reclassify(swissAlti3d_aspect,
reclass_m)
plot(swissAlti3d_aspect_reclass)
plot(swissAlti3d_aspect_reclass, col = c("red", "blue", "green"))
# create a reclassification matrix
reclass_df <- c(0,180, 1 ,180,270, 2, 270,360, 3)
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
swissAlti3d_aspect_reclass <- reclassify(swissAlti3d_aspect,
reclass_m)
plot(swissAlti3d_aspect_reclass, col = c("red", "blue", "green"))
# create a reclassification matrix
reclass_df <- c(0,90,1,90,180,2,180,270,3,270,360,4)
reclass_m <- matrix(reclass_df,
ncol = 4,
byrow = TRUE)
reclass_m
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
reclass_m
swissAlti3d_aspect_reclass <- reclassify(swissAlti3d_aspect,
reclass_m)
plot(swissAlti3d_aspect_reclass, col = c("red", "green", "yellow","blue"))
# create a reclassification matrix
reclass_df <- c(0,90,"1",90,180,"2",180,270,"3",270,360,"4")
# convert to Matrix
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
reclass_m
swissAlti3d_aspect_reclass <- reclassify(swissAlti3d_aspect,
reclass_m)
1
# convert to Matrix
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
reclass_m
# create a reclassification matrix
reclass_df <- c(0,90,1,90,180,2,180,270,3,270,360,4)
# convert to Matrix
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
reclass_m
swissAlti3d_aspect_reclass <- reclassify(swissAlti3d_aspect,
reclass_m)
plot(swissAlti3d_aspect_reclass, col = c("red", "green", "yellow","blue"),
main = "Aspect of swissALTI3D2019 in 4 classes",
cex.main=1,font.main=4)
swissAlti3d_aspect_reclass <- reclassify(swissAlti3d_aspect,
reclass_m)
plot(swissAlti3d_aspect_reclass, col = c("red", "green", "yellow","blue"),
main = "Aspect of swissALTI3D2019 in 4 classes",
cex.main=1,font.main=4)
legend("topleft", legend=c("Line 1", "Line 2"))
# create a reclassification matrix
reclass_df <- c(0,90,0-90,90,180,90-180,180,270,180-270,270,360,4)
# convert to Matrix
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
reclass_m
# create a reclassification matrix
reclass_df <- c(0,90,1,90,180,2,180,270,3,270,360,4)
# convert to Matrix
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
reclass_m
plot(swissAlti3d_aspect_reclass, col = c("red", "green", "yellow","blue"),
main = "Aspect of swissALTI3D2019 in 4 classes",
cex.main=1,font.main=4, legend = FALSE)
swissAlti3d_aspect_reclass <- reclassify(swissAlti3d_aspect,
reclass_m)
plot(swissAlti3d_aspect_reclass, col = c("red", "green", "yellow","blue"),
main = "Aspect of swissALTI3D2019 in 4 classes",
cex.main=1,font.main=4, legend = FALSE)
legend("topright",
legend = c("0°-90°", "90°-180°", "180°-270°","270°-360°"),
fill = c("red", "blue", "green", "yellow"),
border = FALSE,
bty = "n") # turn off legend border
summary(swissAlti3d_aspect)
histinfo$breaks
library(sf)
library(tidyverse)
library(raster)
# Importing a raster dataset
# swissALTI3D2019.tif -- Source: https://geovite.ethz.ch
library(raster)
swissAlti3d <- raster("sample_data/Raster/swissALTI3D2019.tif")
plot(swissAlti3d,
main = "swissALTI3D2019 - CRS: CH1903+LV95",
cex.main=1,font.main=4)
# Computing the slope of a raster dataset using the terrain() function
swissAlti3d_slope <- terrain(swissAlti3d, opt="slope", unit="degrees")
plot(swissAlti3d_slope,
main = "Slope of swissALTI3D2019 in degrees (°)",
cex.main=1,font.main=4)
# Computing the aspect of the terrain dataset
swissAlti3d_aspect <- terrain(swissAlti3d, opt="aspect", unit="degrees")
plot(swissAlti3d_aspect,
main = "Aspect of swissALTI3D2019 in degrees (°)",
cex.main=1,font.main=4)
histinfo$breaks
summary(swissAlti3d_aspect)
histinfo$breaks
hist(swissAlti3d_aspect)
summary(swissAlti3d_aspect)
histinfo <- hist(swissAlti3d_aspect)
histinfo$breaks
count(histinfo$breaks)
histinfo$counts
library(raster)
library(terra)
r <- raster(ncol=10, nrow=10)
ncell(r)
values(r) <- 1:ncell(r)
# # inMemory(r)
values(r)[1:10]
plot(r, main='Raster with 100 cells')
f1 <- focal(r, w=matrix(1,nrow=3,ncol=3)  , fun=sum)
plot(f1)
library(raster)
library(terra)
r <- raster(ncol=10, nrow=10)
ncell(r)
values(r) <- 1:ncell(r)
# # inMemory(r)
values(r)[1:10]
plot(r, main='Raster with 100 cells')
library(terra)
r_spat <- as(r, "spatRaster")
r_spat <- as(r, "SpatRaster")
f2 <- terra::focal(r_spat,w=3,fun = "sum")
plot(f2)
f1 <- focal(r, w=matrix(1,nrow=3,ncol=3)  , fun=sum)
plot(f1)
library(terra)
r_spat <- as(r, "SpatRaster")
f2 <- terra::focal(r_spat,w=3,fun = "sum")
plot(f2)
library(raster)
library(terra)
r <- raster(ncol=10, nrow=10)
values(r) <- 1:ncell(r)
plot(r, main='Raster with 100 cells')
f1 <- focal(r, w=matrix(1,nrow=3,ncol=3)  , fun=sum)
plot(f1)
matrix
library(terra)
r_spat <- as(r, "SpatRaster")
f2 <- terra::focal(r_spat,w=3,fun = "sum")
plot(f2, main = "Raster after applying focal statistics operation")
f1 <- focal(r, w=matrix(1,nrow=3,ncol=3),fun=sum)
plot(f1, main = "Raster after applying the focal function - raster package")
plot(f1, main = "Raster after applying the focal function - raster package", cex.main =0.75)
plot(f1, main = "Raster after applying the focal function - raster package", cex.main =1)
library(terra)
r_spat <- as(r, "SpatRaster")
f2 <- terra::focal(r_spat,w=3,fun = "sum")
plot(f2, main = "Raster after applying the focal function - terra package", cex.main = 1)
library(raster)
library(terra)
r <- raster(ncol=10, nrow=10)
values(r) <- 1:ncell(r)
plot(r, main='Raster with 100 cells', cex.main = 1)
r <- raster(ncols=10, nrows=10)
library(raster)
r <- raster(ncols=10, nrows=10)
plot(r)
values(r) <- runif(ncell(r)) * 1:ncell(r)
values(r)
runif(10)
ncell(r)
# generating random numbers that will used as values in our raster layer
values(r) <- runif(ncell(r)) * 1:ncell(r)
z <- r
z <- r
z
values(z)
values(z) <- rep(1:5, each=20)
values(z)
# for large files, use a character value rather than a function
raster_zonal <- zonal(r, z, 'sum')
plot(raster_zonal)
# for large files, use a character value rather than a function
zonal(r, z, 'sum')
# Zonal statistics - Mean
zonal(r, z, mean)
# Zonal statistics - Minimum
zonal(r, z, min)
# Zonal statistics - Summarize
zonal(r, z, sum)
# Zonal statistics - Summarize
zonal(r, z, sum)
# Zonal statistics - Mean
zonal(r, z, mean)
# Zonal statistics - Summarize
zonal(r, z, sum)
# Zonal statistics - Minimum
zonal(r, z, "min")
# Zonal statistics - Summarize
zonal(r, z, "sum")
# Zonal statistics - Mean
zonal(r, z, "mean")
# Zonal statistics - Minimum
zonal(r, z, "min")
plot
library(dplyr)
d1 <- data_frame(
x = letters[1:3],
y = LETTERS[1:3],
a = rnorm(3)
)
d1
d2 <- data_frame(
x2 = letters[3:1],
y2 = LETTERS[3:1],
b = rnorm(3)
)
d2
left_join(d1, d2, by = c("x" = "x2", "y" = "y2"))
left_join(d1, d2, by = c("x" = "x2", "y" = "y2"))
library(dplyr)
d1 <- data_frame(
x = letters[1:3],
y = LETTERS[1:3],
a = rnorm(3)
)
d1
d2 <- data_frame(
x2 = letters[3:1],
y2 = LETTERS[3:1],
b = rnorm(3)
)
d2
d1
d2
left_join(d1, d2, by = c("x" = "x2", "y" = "y2"))
d1
library(dplyr)
wetter <- read_table("sample_data/prepro/order_52252_data.txt")
library(readr)
wetter <- read_table("sample_data/prepro/order_52252_data.txt")
wetter <- read_table("sample_data/prepro/order_52252_data.txt")
wetter
parse_datetime(as.character(wetter$time), format = "%Y%m%d%H")
library(dplyr)
library(readr)
wetter <- read_table("sample_data/prepro/order_52252_data.txt")
parse_datetime(as.character(wetter$time), format = "%Y%m%d%H")
wetter$time <- as.POSIXct(as.character(wetter$time), format = "%Y%m%d%H",tz = "UTC")
wetter
wetter_legende <- read_delim("sample_data/prepro/order_52252_legend.csv",
delim = ";",
locale = locale(encoding = "UTF-8"))
wetter
wetter_legende
wetter <- left_join(wetter,wetter_legende,by = "stn")
wetter
wetter <- read_table("sample_data/prepro/order_52252_data.txt")
wetter_legende <- read_delim("sample_data/prepro/order_52252_legend.csv",
delim = ";",
locale = locale(encoding = "UTF-8"))
wetter <- left_join(wetter,wetter_legende,by = "stn")
library(dplyr)
library(readr)
# Import the first dataframe - the one that will be on the left side
wetter <- read_table("sample_data/prepro/order_52252_data.txt")
# Import the second dataframe
wetter_legende <- read_delim("sample_data/prepro/order_52252_legend.csv",
delim = ";",
locale = locale(encoding = "UTF-8"))
head(wetter)
head(wetter_legende)
wetter_joined <- left_join(wetter,wetter_legende,by = "stn")
head(wetter_joined)
test <- join(wetter, wetter_legende, by = "stn", type = "left", match = "all")
test<-merge(wetter,wetter_legende)
View(test)
View(wetter)
View(wetter_legende)
df1 <- data.frame("Team" = c("p","lakers","bucks"))
df1
df1 <- data.frame(TeamID = c(1,4,6),
TeamName = c("p","lakers","bucks"))
df1
df1 <- data.frame(TeamID = c(1,4,6,11),
TeamName = c("new york knicks","los angeles lakers","milwaukee bucks","boston celtics"),
Championships = c(2,17,1,17))
df1 <- data.frame(TeamID = c(1,4,6,11),
TeamName = c("new york knicks","los angeles lakers","milwaukee bucks","boston celtics"),
Championships = c(2,17,1,17))
df2 <- data.frame(TeamID = c(1,2,11),
TeamName = c("new york knicks","Philadelphia 76ers","boston celtics","los angeles clippers"),
Championships = c(2,3,17,0))
df1 <- data.frame(TeamID = c(1,4,6,11),
TeamName = c("new york knicks","los angeles lakers","milwaukee bucks","boston celtics"),
Championships = c(2,17,1,17))
df2 <- data.frame(TeamID = c(1,2,11,8),
TeamName = c("new york knicks","Philadelphia 76ers","boston celtics","los angeles clippers"),
Championships = c(2,3,17,0))
df1
df2
df1 <- data.frame(TeamID = c(1,4,6,11),
TeamName = c("new york knicks","los angeles lakers","milwaukee bucks","boston celtics"),
Championships = c(2,17,1,17))
df2 <- data.frame(TeamID = c(1,2,11,8),
TeamName = c("new york knicks","philadelphia 76ers","boston celtics","los angeles clippers"),
Championships = c(2,3,17,0))
library(dplyr)
df_innerJoin <- inner_join(df1,df2, by = "TeamID")
df_innerJoin
df_innerJoin <- inner_join(df1,df2)
df_innerJoin
df_innerJoin <- inner_join(df1,df2, by = TeamID)
df_innerJoin <- inner_join(df1,df2, by = "TeamID")
df_innerJoin
df_innerJoin <- inner_join(df1,df2)
df_innerJoin
df_innerJoin <- df1 %>% inner_join(df2)
df_innerJoin
df_innerJoin <- df1 %>% inner_join(df2, by = "TeamID")
df_innerJoin
df_innerJoin <- df1 %>% inner_join(df2, by = NULL)
df_innerJoin
knitr::include_graphics("images/joins.png")
knitr::include_graphics("images/joins.png")
knitr::include_graphics("images/joins.png")
knitr::include_graphics("images/joins.png")
knitr::include_graphics("images/joins.png")
df_fullJoin <- full_join(df1,df2)
df_fullJoin
df_leftJoin <- left_join(df1,df2)
df_leftJoin
df_rightJoin <- right_join(df1,df2)
df_rightJoin
df_leftJoin
library(raster)
pop_2000 <- raster("sample_data/population_raster/gpw_v4_population_count_rev11_2000_2pt5_min.tif")
library(raster)
pop_2000 <- raster("sample_data/population_raster/gpw_v4_population_count_rev11_2000_2pt5_min.tif")
pop_2010 <- raster("sample_data/population_raster/gpw_v4_population_count_rev11_2010_2pt5_min.tif")
par(mfrow=c(1,2))
plot(pop_2000)
plot(pop_2010)
pop_2000-pop_2010
t <- pop_2010-pop_2000
plot(t)
library(raster)
pop_2000 <- raster("sample_data/population_raster/gpw_v4_population_count_rev11_2000_2pt5_min.tif")
pop_2010 <- raster("sample_data/population_raster/gpw_v4_population_count_rev11_2010_2pt5_min.tif")
par(mfrow=c(1,2))
plot(pop_2000)
plot(pop_2010)
plot(pop_2000)
plot(pop_2010)
diff_rasters <- function(b1, b2){
# this function calculates the difference between two rasters of the same CRS and extent
# input: 2 raster layers of the same extent, crs that can be subtracted
# output: a single different raster of the same extent, crs of the input rasters
diff <- b2 - b1
return(diff)
}
pop2010_2000 <- overlay(pop_2010, pop_2000,
fun = diff_rasters)
plot(pop2010_2000,
main = "Canopy Height Model derived using the overlay function \n and the band_diff function\n that you created")
plot(pop2010_2000,
main = "Difference in two rasters")
# Read the data for our example
library(raster)
# India's population in 2000
india_2000 <- raster("../sample_data/population_raster/india_2000.tif")
# Read the data for our example
library(raster)
# India's population in 2000
india_2000 <- raster("sample_data/population_raster/india_2000.tif")
# India's population in 2010
india_2010 <- raster("sample_data/population_raster/india_2010.tif")
par(mfrow=c(1,2))
plot(india_2000)
plot(india_2010)
diff_rasters <- function(b1, b2){
# this function calculates the difference between two rasters of the same CRS and extent
# input: 2 raster layers of the same extent, crs that can be subtracted
# output: a single different raster of the same extent, crs of the input rasters
diff <- b2 - b1
return(diff)
}
# Compute the raster that depicts the difference in population in these 10 years
pop2010_2000 <- overlay(india_2010, india_2000,
fun = diff_rasters)
plot(pop2010_2000,
main = "India's population difference in the timespan of 10 years")
# Compute the raster that depicts the difference in population in these 10 years
pop2010_2000 <- overlay(india_2000, india_2010,
fun = diff_rasters)
plot(pop2010_2000,
main = "India's population difference in the timespan of 10 years")
# Compute the raster that depicts the difference in population in these 10 years
pop2010_2000 <- overlay(india_2000, india_2010,
fun = diff_rasters)
plot(pop2010_2000,
main = "India's population difference in the timespan of 10 years",
cex.main = 1)
# The area of interest from the previous example - section Clip
head(kantons_aOi)
knitr::opts_chunk$set(warning = F, message = F, tidy = T)
# Point dataset depicting the train stations locations across Switzerland
bahn_haltestelle_ch <- st_read("sample_data/other/Haltestelle_Bahn_CH.shp")
# The area of interest from the previous example - section Clip
head(kantons_aOi)
knitr::opts_chunk$set(warning = F, message = F, tidy = T)
# Point dataset depicting the train stations locations across Switzerland
bahn_haltestelle_ch <- st_read("sample_data/other/Haltestelle_Bahn_CH.shp")
# Point dataset depicting the train stations locations across Switzerland
bahn_haltestelle_ch <- st_read("sample_data/other/Haltestelle_Bahn_CH.shp")
knitr::opts_chunk$set(warning = F, message = F, tidy = T)
library(sf)
# Point dataset depicting the train stations locations across Switzerland
bahn_haltestelle_ch <- st_read("sample_data/other/Haltestelle_Bahn_CH.shp")
# Dataset depicting Switzerland on canton level
kantonsgebiet <- st_read("sample_data/other/Kantonsgebiet.shp")
tmap_mode(mode = c("plot")) # setting the plotting mode to static -- optimizing the process
