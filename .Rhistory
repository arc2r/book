plot(st_multipolygon(lapply(mp, function(x) x[4])))
lapply(nc5$geometry)
lapply(nc5$geometry,length)
sapply(nc5$geometry,length)
sapply(nc_union$geometry,length)
nc_union$geometry
nc_union
sapply(nc_singlepart$geometry,length)
# or with purrr:
map_lgl(nc_singlepart$geometry,~length(.x)== 1)
nc_singlepart
st_centroid(nc_singlepart)
holes <- st_centroid(nc_singlepart) %>%
st_buffer(10000)
ggplot(nc_singlepart) + geom_sf() + geom_sf(data = holes)
ggplot(nc_singlepart) + geom_sf() + geom_sf(data = holes, fill = NA)
holes
ggplot(nc_singlepart) + geom_sf()
holes <- st_centroid(nc_singlepart) %>%
st_buffer(100)
ggplot(nc_singlepart) + geom_sf() + geom_sf(data = holes, fill = NA)
holes <- st_centroid(nc_singlepart) %>%
st_buffer(1)
ggplot(nc_singlepart) + geom_sf() + geom_sf(data = holes, fill = NA)
holes <- st_centroid(nc_singlepart) %>%
st_buffer(0.5)
ggplot(nc_singlepart) + geom_sf() + geom_sf(data = holes, fill = NA)
nc_holes <- st_difference(nc_singlepart,holes)
ggplot(nc_holes) + geom_sf()
nc_holes
nc_holes
nc_holes
ggplot(nc_holes) + geom_sf()
nc_holes <- st_difference(holes,nc_singlepart)
ggplot(nc_holes) + geom_sf()
nc_holes <- st_difference(nc_singlepart,holes)
ggplot(nc_holes) + geom_sf()
ggplot(nc_singlepart) + geom_sf()
ggplot(nc_singlepart) + geom_sf() + geom_sf(holes)
ggplot(nc_singlepart) + geom_sf() + geom_sf(data = holes)
holes <- nc_singlepart %>%
st_union() %>%
st_centroid() %>%
st_buffer(0.5)
ggplot(nc_singlepart) + geom_sf() + geom_sf(data = holes)
nc_holes <- st_difference(nc_singlepart,holes)
nc_holes
ggplot(nc_holes) + geom_sf() + geom_sf(data = holes)
ggplot(nc_holes) + geom_sf()
ggplot(nc_holes) + geom_sf() +
theme_void()
ggplot(nc_holes) +
geom_sf() +
theme_void()
holes <- nc_singlepart %>%
st_union() %>%
st_centroid() %>%
st_buffer(0.5)
nc_holes <- st_difference(nc_singlepart,holes)
ggplot(nc_holes) +
geom_sf() +
theme_void()
map_lgl(nc_holes$geometry,~length(.x)== 1)
read_file("06_Topology_Rules/images/")
list.files("06_Topology_Rules/images/")
list.files("06_Topology_Rules/images/") %>% paste("\n")
list.files("06_Topology_Rules/images/") %>% paste("",collapse = ",")
data.frame(x = rnorm(10),y = rnorm(10)) %>%
st_as_sfc(coords = c(1,2))
library(sf)
library(tidyverse)
data.frame(x = rnorm(10),y = rnorm(10)) %>%
st_as_sfc(coords = c(1,2))
data.frame(x = rnorm(10),y = rnorm(10)) %>%
st_as_sf(coords = c(1,2))
mypoints <- data.frame(x = rnorm(10),y = rnorm(10)) %>%
st_as_sf(coords = c(1,2))
plot(mypoints)
mypoints <- data.frame(x = rnorm(100),y = rnorm(100)) %>%
st_as_sf(coords = c(1,2))
plot(mypoints)
tmaptools::smooth_map(mypoints)
ras <- tmaptools::smooth_map(mypoints)
plot(ras)
plot(ras$raster)
ras$raster
library(tmap)
tm_shape(ras$raster) + tm_raster()
ras <- tmaptools::smooth_map(mypoints)
set.seed(10)
mypoints <- data.frame(x = rnorm(100),y = rnorm(100)) %>%
st_as_sf(coords = c(1,2))
plot(mypoints)
mypoints <- data.frame(x = rnorm(100),y = rnorm(100)) %>%
st_as_sf(coords = c(1,2))
# Chunk 1
library(sf)
library(tidyverse)
set.seed(10)
mypoints <- data.frame(x = rnorm(100),y = rnorm(100)) %>%
st_as_sf(coords = c(1,2))
plot(mypoints)
mypoints <- data.frame(x = rnorm(1000),y = rnorm(1000)) %>%
st_as_sf(coords = c(1,2))
plot(mypoints)
my_kde <- function(points,cellsize, bandwith, extent = NULL){
require(MASS)
require(raster)
require(sf)
require(stars)
if(is.null(extent)){
extent_vec <- st_bbox(points)[c(1,3,2,4)]
} else{
extent_vec <- st_bbox(extent)[c(1,3,2,4)]
}
n_y <- ceiling((extent_vec[4]-extent_vec[3])/cellsize)
n_x <- ceiling((extent_vec[2]-extent_vec[1])/cellsize)
extent_vec[2] <- extent_vec[1]+(n_x*cellsize)-cellsize
extent_vec[4] <- extent_vec[3]+(n_y*cellsize)-cellsize
coords <- st_coordinates(points)
matrix <- kde2d(coords[,1],coords[,2],h = bandwith,n = c(n_x,n_y),lims = extent_vec)
raster(matrix)
}
mypoints_kde <- my_kde(mypoints)
plot(mypoints_kde, add = TRUE)
mypoints_kde <- my_kde(mypoints)
mypoints_kde <- my_kde(mypoints,0.05,0.5)
plot(mypoints_kde, add = TRUE)
mypoints_kde <- my_kde(mypoints,0.01,0.5)
plot(mypoints_kde, add = TRUE)
ggplot(mypoints_kde) +
geom_sf()
ggplot(mypoints) +
geom_sf()
library(stars)
ggplot(mypoints) +
geom_sf() +
geom_stars(st_as_stars(mypoints_kde))
ggplot(mypoints) +
geom_sf() +
geom_stars(data = st_as_stars(mypoints_kde))
ggplot() +
geom_stars(data = st_as_stars(mypoints_kde)) +
geom_sf(data = mypoints)
mypoints_kde <- my_kde(mypoints,0.01,1)
ggplot() +
geom_stars(data = st_as_stars(mypoints_kde)) +
geom_sf(data = mypoints) +
scale_fill_viridis_c()
ggplot() +
geom_stars(data = st_as_stars(mypoints_kde)) +
geom_sf(data = mypoints, alpha = 0.2) +
scale_fill_viridis_c()
ggplot() +
geom_stars(data = st_as_stars(mypoints_kde)) +
geom_sf(data = mypoints, alpha = 0.2) +
scale_fill_viridis_c() +
theme_void()
ggplot() +
geom_stars(data = st_as_stars(mypoints_kde)) +
geom_sf(data = mypoints, alpha = 0.2) +
scale_fill_viridis_c() +
labs(fill = "KDE")
ggplot() +
geom_stars(data = st_as_stars(mypoints_kde)) +
geom_sf(data = mypoints, alpha = 0.2) +
scale_fill_viridis_c() +
labs(fill = "KDE") +
theme_void()
ggplot() +
geom_stars(data = st_as_stars(mypoints_kde)) +
geom_sf(data = mypoints, alpha = 0.2, colour = NA) +
scale_fill_viridis_c() +
labs(fill = "KDE") +
theme_void()
ggplot() +
geom_stars(data = st_as_stars(mypoints_kde)) +
geom_sf(data = mypoints, alpha = 0.5, colour = NA) +
scale_fill_viridis_c() +
labs(fill = "KDE") +
theme_void()
ggplot() +
geom_stars(data = st_as_stars(mypoints_kde)) +
geom_sf(data = mypoints, alpha = 0.5, fill = "black", colour = NA) +
scale_fill_viridis_c() +
labs(fill = "KDE") +
theme_void()
ggplot() +
geom_stars(data = st_as_stars(mypoints_kde)) +
geom_sf(data = mypoints, alpha = 0.5, fill = "black") +
scale_fill_viridis_c() +
labs(fill = "KDE") +
theme_void()
ggplot() +
geom_stars(data = st_as_stars(mypoints_kde)) +
geom_sf(data = mypoints, alpha = 0.2, fill = "black") +
scale_fill_viridis_c() +
labs(fill = "KDE") +
theme_void()
points
nc <- st_read(system.file("shape/nc.shp", package="sf"), quiet = TRUE)
nc_union <- st_union(nc)
nc <- st_read(system.file("shape/nc.shp", package="sf"), quiet = TRUE)
nc_union <- st_union(nc)
st_sample(nc_union,1000)
points <- st_sample(nc_union,1000)
thiessen <- st_voronoi(st_union(points))
plot(thiessen)
thiessen
thiessen <- st_cast(thiessen)
plot(thiessen)
thiessen_clip <- st_intersection(thiessen,nc_union)
plot(thiessen_clip)
points
st_sf(points)
st_sf(points) %>%
mutate(val = rnorm(1000))
points <- st_sf(points) %>%
mutate(val = rnorm(1000))
points <- nc_union %>%
st_sample(1000) %>%
st_sf() %>%
mutate(val = rnorm(1000))
ggplot() +
geom_sf(data = nc) +
geom_sf(data = thiessen_clip, fill = NA)
thiessen <- st_intersection(thiessen,nc_union)
ggplot() +
geom_sf(data = nc) +
geom_sf(data = thiessen, fill = NA)
ggplot() +
geom_sf(data = nc) +
geom_sf(data = thiessen, fill = NA) +
theme_void()
ggplot() +
geom_sf(data = nc) +
geom_sf(data = thiessen, fill = NA) +
geom_sf(data = points, aes(colour = val)) +
theme_void()
st_as_sf(thiessenpolygone_clip)
st_as_sf(thiessen)
thiessen
thiessen <- st_as_sf(thiessen)
thiessen <- st_join(thiessen,points)
thiessen
ggplot() +
geom_sf(data = thiessen, aes(fill = val)) +
scale_fill_viridis_c() +
theme_void()
ggplot() +
geom_sf(data = thiessen, aes(fill = val)) +
geom_sf(data = points) +
scale_fill_viridis_c() +
theme_void()
nc <- st_read(system.file("shape/nc.shp", package="sf"), quiet = TRUE)
nc_union <- st_union(nc)
points <- nc_union %>%
st_sample(1000) %>%
st_sf() %>%
mutate(val = rnorm(1000))
thiessen <- st_voronoi(st_union(points))
thiessen <- st_cast(thiessen)
thiessen <- st_intersection(thiessen,nc_union)
ggplot() +
geom_sf(data = nc) +
geom_sf(data = thiessen, fill = NA) +
geom_sf(data = points, aes(colour = val)) +
theme_void()
thiessen <- st_as_sf(thiessen)
thiessen <- st_join(thiessen,points)
ggplot() +
geom_sf(data = thiessen, aes(fill = val)) +
geom_sf(data = points) +
scale_fill_viridis_c() +
theme_void()
meus
my_krige <- function(groundtruth,column,cellsize, nmax = Inf, maxdist = Inf, idp = 2, extent = NULL){
require(gstat)
require(sf)
require(raster)
if(is.null(extent)){
extent <- groundtruth
}
samples <- st_make_grid(extent,cellsize,what = "centers") %>% st_as_sf()
my_formula <- formula(paste(column,"~1"))
idw_sf <- gstat::krige(formula = my_formula,groundtruth,newdata = samples,nmin = 1, maxdist = maxdist, idp = idp)
idw_matrix <- cbind(st_coordinates(idw_sf),idw_sf$var1.pred)
ras <- raster::rasterFromXYZ(idw_matrix)
if(all(grepl("polygon",st_geometry_type(extent),ignore.case = TRUE))){
ras <- raster::mask(ras,st_as_sf(st_zm(extent)))
}
ras
}
lib
library(remotes)
library(remotes)
remotes::install_github("r-lib/ghactions")
3
ghactions::use_ghactions(workflow = ghactions::website())
ghactions::edit_workflow()
file.create('docs/.nojekyll')
git add -A
sp::loadMeuse()
sp::demo(meuse)
demo(meuse)
data(meuse)
library(sp)
data(meuse)
meuse
meuse %>%
st_as_sf(coords = c("x","y"))
library(sf)
library(tidyverse)
meuse %>%
st_as_sf(coords = c("x","y"))
meuse_sf <- meuse %>%
st_as_sf(coords = c("x","y"))
my_idw(meuse_sf)
my_idw <- function(groundtruth,column,cellsize, nmax = Inf, maxdist = Inf, idp = 2, extent = NULL){
require(gstat)
require(sf)
require(raster)
if(is.null(extent)){
extent <- groundtruth
}
samples <- st_make_grid(extent,cellsize,what = "centers") %>% st_as_sf()
my_formula <- formula(paste(column,"~1"))
idw_sf <- gstat::idw(formula = my_formula,groundtruth,newdata = samples,nmin = 1, maxdist = maxdist, idp = idp)
idw_matrix <- cbind(st_coordinates(idw_sf),idw_sf$var1.pred)
ras <- raster::rasterFromXYZ(idw_matrix)
if(all(grepl("polygon",st_geometry_type(extent),ignore.case = TRUE))){
ras <- raster::mask(ras,st_as_sf(st_zm(extent)))
}
ras
}
my_idw(meuse_sf)
my_idw(meuse_sf,"copper",cellsize = 10)
meuse_idw <- my_idw(meuse_sf,"copper",cellsize = 10)
library(stars)
ggplot() +
geom_stars(st_as_stars(meuse_idw))
meuse_idw
st_as_stars(meuse_idw)
ggplot() +
geom_stars(st_as_stars(meuse_idw))
ggplot() +
geom_stars(data = st_as_stars(meuse_idw))
meuse_idw <- my_idw(meuse_sf,"copper",cellsize = 100)
ggplot() +
geom_stars(data = st_as_stars(meuse_idw)) +
scale_fill_viridis_c() +
theme_void()
meuse_idw <- my_idw(meuse_sf,"copper",cellsize = 50)
ggplot() +
geom_stars(data = st_as_stars(meuse_idw)) +
scale_fill_viridis_c() +
theme_void()
ggplot() +
geom_stars(data = st_as_stars(meuse_idw)) +
scale_fill_viridis_c() +
theme_void() +
labs(fill = "copper")
meuse_sf
meuse_idw <- my_idw(meuse_sf,"copper",cellsize = 10)
ggplot() +
geom_stars(data = st_as_stars(meuse_idw)) +
scale_fill_viridis_c() +
theme_void() +
labs(fill = "copper")
meuse_idw <- my_idw(meuse_sf,"copper",cellsize = 10,idp = 3)
ggplot() +
geom_stars(data = st_as_stars(meuse_idw)) +
scale_fill_viridis_c() +
theme_void() +
labs(fill = "copper")
meuse_krige <- my_krige(meuse_sf,"copper",cellsize = 10,idp = 3)
my_krige <- function(groundtruth,column,cellsize, nmax = Inf, maxdist = Inf, idp = 2, extent = NULL){
require(gstat)
require(sf)
require(raster)
if(is.null(extent)){
extent <- groundtruth
}
samples <- st_make_grid(extent,cellsize,what = "centers") %>% st_as_sf()
my_formula <- formula(paste(column,"~1"))
idw_sf <- gstat::krige(formula = my_formula,groundtruth,newdata = samples,nmin = 1, maxdist = maxdist, idp = idp)
idw_matrix <- cbind(st_coordinates(idw_sf),idw_sf$var1.pred)
ras <- raster::rasterFromXYZ(idw_matrix)
if(all(grepl("polygon",st_geometry_type(extent),ignore.case = TRUE))){
ras <- raster::mask(ras,st_as_sf(st_zm(extent)))
}
ras
}
meuse_krige <- my_krige(meuse_sf,"copper",cellsize = 10,idp = 3)
my_krige <- function(groundtruth,column,cellsize, nmax = Inf, maxdist = Inf, extent = NULL){
require(gstat)
require(sf)
require(raster)
if(is.null(extent)){
extent <- groundtruth
}
samples <- st_make_grid(extent,cellsize,what = "centers") %>% st_as_sf()
my_formula <- formula(paste(column,"~1"))
idw_sf <- gstat::krige(formula = my_formula,groundtruth,newdata = samples,nmin = 1, maxdist = maxdist)
idw_matrix <- cbind(st_coordinates(idw_sf),idw_sf$var1.pred)
ras <- raster::rasterFromXYZ(idw_matrix)
if(all(grepl("polygon",st_geometry_type(extent),ignore.case = TRUE))){
ras <- raster::mask(ras,st_as_sf(st_zm(extent)))
}
ras
}
meuse_krige <- my_krige(meuse_sf,"copper",cellsize = 10,idp = 3)
meuse_krige <- my_krige(meuse_sf,"copper",cellsize = 10)
ggplot() +
geom_stars(data = st_as_stars(meuse_krige)) +
scale_fill_viridis_c() +
theme_void() +
labs(fill = "copper")
meuse_krige <- my_krige(meuse_sf,"copper",cellsize = 10,maxdist = 500)
ggplot() +
geom_stars(data = st_as_stars(meuse_krige)) +
scale_fill_viridis_c() +
theme_void() +
labs(fill = "copper")
ggplot() +
geom_stars(data = st_as_stars(meuse_krige), fill.na = NA) +
scale_fill_viridis_c() +
theme_void() +
labs(fill = "copper")
ggplot() +
geom_stars(data = st_as_stars(meuse_krige), na.fill = NA) +
scale_fill_viridis_c() +
theme_void() +
labs(fill = "copper")
ggplot() +
geom_stars(data = st_as_stars(meuse_krige)) +
scale_fill_viridis_c(na.value = NA) +
theme_void() +
labs(fill = "copper")
meuse_krige <- my_krige(meuse_sf,"copper",cellsize = 10,nmax = 30, maxdist = 500)
meuse_thissen <- st_voronoi(st_union(meuse_sf))
meuse_thissen <- st_cast(meuse_thissen)
meuse_thissen
meuse_thiessen <- st_voronoi(st_union(meuse_sf))
meuse_thiessen <- st_cast(meuse_thissen)
ggplot() +
geom_sf(data = nc) +
geom_sf(data = meuse_thiessen, fill = NA)
ggplot() +
geom_sf(data = meuse_thiessen, fill = NA)
st_bbox(meuse_thiessen)
meuse_sf %>%
st_bbox() %>%
st_sfc()
meuse_sf %>%
st_bbox() %>%
st_as_sfc()
meuse_bbox <- meuse_sf %>%
st_bbox() %>%
st_as_sfc()
thiessen <- st_intersection(thiessen,meuse_bbox)
ggplot() +
geom_sf(data = meuse_thiessen, fill = NA) +
theme_void()
thiessen
meuse_thiessen <- st_intersection(meuse_thiessen,meuse_bbox)
ggplot() +
geom_sf(data = meuse_thiessen, fill = NA) +
theme_void()
meuse_thiessen <- st_join(meuse_thiessen,meuse_sf)
ggplot() +
geom_sf(data = meuse_thiessen, aes(fill = val)) +
scale_fill_viridis_c() +
theme_void()
meuse_thiessen
meuse_sf
meuse_thiessen
meuse_thiessen <- st_as_sf(meuse_thiessen)
meuse_thiessen
meuse_thiessen <- st_join(meuse_thiessen,meuse_sf)
meuse_thiessen
ggplot() +
geom_sf(data = meuse_thiessen, aes(fill = copper)) +
scale_fill_viridis_c() +
theme_void()
ggplot() +
geom_sf(data = meuse_thiessen, aes(fill = copper)) +
geom_sf(data = meuse_sf) +
scale_fill_viridis_c() +
theme_void()
meuse_thiessen <- st_voronoi(st_union(meuse_sf))
meuse_thiessen
library(sf)
library(tidyvers)
library(tidyverse)
st_read(system.file("shape/nc.shp", package = "sf"),quiet = TRUE)
nc <- st_read(system.file("shape/nc.shp", package = "sf"),quiet = TRUE)
plot(nc)
plot(st_geometry(nc))
library(tmap)
tmap_mode("view")
# Set the mode to "view", to make interactive maps.
# Mode "pl
tmap_mode("plot")
library(sf)
library(tidyverse)
library(tmap)
nc <- st_read(system.file("shape/nc.shp", package = "sf"),quiet = TRUE)
tmap_mode("view")
tm_shape(nc) +
tm_polygons()
print(nc)
