seq_len(8)
map(seq_len(8),function(irow){
map(seq_len(4),function(icol){
glue({irow+icol})
})
})
map(seq_len(8),function(irow){
map(seq_len(4),function(icol){
orgimg %>%
image_crop(glue("{width}x{height}+{veryleft+icol*(widthgap+width)}+{verytop+irow*(heightgap+height)}")) %>%
image_write(glue("06_Toplology_Rules/{irow}_{icol}.jpg"))
})
})
map(seq_len(1),function(irow){
map(seq_len(1),function(icol){
orgimg %>%
image_crop(glue("{width}x{height}+{veryleft+icol*(widthgap+width)}+{verytop+irow*(heightgap+height)}"))
# image_write(glue("06_Toplology_Rules/{irow}_{icol}.jpg"))
})
})
map(seq_len(1),function(irow){
map(seq_len(1),function(icol){
orgimg %>%
image_crop(glue("{width}x{height}+{veryleft+icol*(widthgap+width)}+{verytop+irow*(heightgap+height)}"))
# image_write(glue("06_Toplology_Rules/{irow}_{icol}.jpg"))
})
})
map(seq_len(1),function(irow){
map(seq_len(1),function(icol){
orgimg %>%
image_crop(glue("{width}x{height}+{veryleft+icol*(widthgap+width)}+{verytop+irow*(heightgap+height)}")) %>%
image_write(glue("06_Toplology_Rules/{irow}_{icol}.jpg"))
})
})
seq_len(1)
seq_len(2)-1
map(seq_len(8)-1,function(irow){
map(seq_len(4)-1,function(icol){
orgimg %>%
image_crop(glue("{width}x{height}+{veryleft+icol*(widthgap+width)}+{verytop+irow*(heightgap+height)}")) %>%
image_write(glue("06_Toplology_Rules/{irow}_{icol}.jpg"))
})
})
map(seq_len(8)-1,function(irow){
map(seq_len(4)-1,function(icol){
orgimg %>%
image_crop(glue("{width}x{height}+{veryleft+icol*(widthgap+width)}+{verytop+irow*(heightgap+height)}")) %>%
image_write(glue("06_Toplology_Rules/images/{irow}_{icol}.jpg"))
})
})
heightgap <- 50
widthgap <- 60
map(seq_len(8)-1,function(irow){
map(seq_len(4)-1,function(icol){
orgimg %>%
image_crop(glue("{width}x{height}+{veryleft+icol*(widthgap+width)}+{verytop+irow*(heightgap+height)}")) %>%
image_write(glue("06_Toplology_Rules/images/{irow}_{icol}.jpg"))
})
})
library(tidyverse)
library(magick)
library(glue)
orgimg <- image_read("06_Toplology_Rules/topology_rules_poster.jpg")
veryleft <- 123
width <- 879 # approx
verytop <- 752
height <- 345
heightgap <- 50
widthgap <- 60
orgimg <- image_read("06_Toplology_Rules/topology_rules_poster.jpg")
library(tidyverse)
library(magick)
library(glue)
widthgap <- 65
map(seq_len(8)-1,function(irow){
map(seq_len(4)-1,function(icol){
orgimg %>%
image_crop(glue("{width}x{height}+{veryleft+icol*(widthgap+width)}+{verytop+irow*(heightgap+height)}")) %>%
image_write(glue("06_Toplology_Rules/images/{irow}_{icol}.jpg"))
})
})
widthgap <- 70
map(seq_len(8)-1,function(irow){
map(seq_len(4)-1,function(icol){
orgimg %>%
image_crop(glue("{width}x{height}+{veryleft+icol*(widthgap+width)}+{verytop+irow*(heightgap+height)}")) %>%
image_write(glue("06_Toplology_Rules/images/{irow}_{icol}.jpg"))
})
})
widthgap <- 75
map(seq_len(8)-1,function(irow){
map(seq_len(4)-1,function(icol){
orgimg %>%
image_crop(glue("{width}x{height}+{veryleft+icol*(widthgap+width)}+{verytop+irow*(heightgap+height)}")) %>%
image_write(glue("06_Toplology_Rules/images/{irow}_{icol}.jpg"))
})
})
widthgap <- 80
map(seq_len(8)-1,function(irow){
map(seq_len(4)-1,function(icol){
orgimg %>%
image_crop(glue("{width}x{height}+{veryleft+icol*(widthgap+width)}+{verytop+irow*(heightgap+height)}")) %>%
image_write(glue("06_Toplology_Rules/images/{irow}_{icol}.jpg"))
})
})
heightgap <- 45
widthgap <- 80
map(seq_len(8)-1,function(irow){
map(seq_len(4)-1,function(icol){
orgimg %>%
image_crop(glue("{width}x{height}+{veryleft+icol*(widthgap+width)}+{verytop+irow*(heightgap+height)}")) %>%
image_write(glue("06_Toplology_Rules/images/{irow}_{icol}.jpg"))
})
})
heightgap <- 40
widthgap <- 80
map(seq_len(8)-1,function(irow){
map(seq_len(4)-1,function(icol){
orgimg %>%
image_crop(glue("{width}x{height}+{veryleft+icol*(widthgap+width)}+{verytop+irow*(heightgap+height)}")) %>%
image_write(glue("06_Toplology_Rules/images/{irow}_{icol}.jpg"))
})
})
heightgap <- 38
widthgap <- 80
map(seq_len(8)-1,function(irow){
map(seq_len(4)-1,function(icol){
orgimg %>%
image_crop(glue("{width}x{height}+{veryleft+icol*(widthgap+width)}+{verytop+irow*(heightgap+height)}")) %>%
image_write(glue("06_Toplology_Rules/images/{irow}_{icol}.jpg"))
})
})
heightgap <- 39
widthgap <- 80
map(seq_len(8)-1,function(irow){
map(seq_len(4)-1,function(icol){
orgimg %>%
image_crop(glue("{width}x{height}+{veryleft+icol*(widthgap+width)}+{verytop+irow*(heightgap+height)}")) %>%
image_write(glue("06_Toplology_Rules/images/{irow}_{icol}.jpg"))
})
})
orgimg %>%
image_crop(glue("{width}x{height}+{veryleft+icol*(widthgap+width)}+{verytop+irow*(heightgap+height)}")) %>%
image_trim() %>%
image_write(glue("06_Toplology_Rules/images/{irow}_{icol}.jpg"))
map(seq_len(8)-1,function(irow){
map(seq_len(4)-1,function(icol){
orgimg %>%
image_crop(glue("{width}x{height}+{veryleft+icol*(widthgap+width)}+{verytop+irow*(heightgap+height)}")) %>%
image_trim() %>%
image_write(glue("06_Toplology_Rules/images/{irow}_{icol}.jpg"))
})
})
![](images/0_0.jpg)
![](images/0_0.jpg)
b0 = st_polygon(list(rbind(c(-1,-1), c(1,-1), c(1,1), c(-1,1), c(-1,-1))))
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, warning = FALSE,message = FALSE)
# Chunk 2
library(sf)
library(tidyverse)
edges <- st_multipoint(matrix(c(0,0,8,0,8,8,0,8),ncol = 2,byrow = TRUE))
board <- st_make_grid(edges,n = 8) %>%
st_as_sf() %>%
mutate(
value = rep(c(rep(c(FALSE,TRUE),4),rep(c(TRUE,FALSE),4)),4),
namex = rep(letters[1:8],8),
namey = rep(1:8,each = 8),
name = paste(namex,namey,sep = ""),
i = row_number()
)
chessplot <- ggplot(board) +
geom_sf(aes(fill = value)) +
geom_sf_label(aes(label = i)) +
scale_x_continuous(breaks = 1:8-0.5,labels = letters[1:8]) +
scale_y_continuous(breaks = 1:8-0.5,labels = 1:8) +
scale_fill_manual(values = c("black","white"))+
theme(legend.position = "none",
panel.grid = element_blank(),
panel.background = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank())
chessplot
# Chunk 3
st_touches(board[36,],board)
# Chunk 4
sel36 <- st_touches(board[36,],board)[[1]]
chessplot +
geom_sf(data = board[36,], fill = "blue", alpha = 0.4)+
geom_sf(data = board[sel36,], fill = "red",alpha = 0.4)
# Chunk 5
mat <- matrix(c(0,0,1,0,1,1,0,1,0,0),ncol = 2,byrow = TRUE)
p1 <- st_polygon(list(mat))
p2 <- st_polygon(list(mat+0.5))
p3 <- st_polygon(list(mat-1))
ggplot() +
geom_sf(data = p1, fill = "blue", alpha = 0.4) +
geom_sf(data = p2, fill = "red", alpha = 0.4)+
# geom_sf(data = p3, fill = "green", alpha = 0.4)+
theme_void()
# Chunk 6
p2_ls <- st_cast(p2,"LINESTRING")
p2_ls2 <- st_intersection(p1,p2_ls)
ggplot() +
geom_sf(data = p1, fill = "blue", alpha = 0.4) +
geom_sf(data = p2, fill = "red", alpha = 0.4)+
geom_sf(data = p2_ls2, colour = "yellow", lwd = 2)+
theme_void()
# Chunk 7
p2_ls <- st_cast(p2,"LINESTRING")
p2_ls2 <- st_intersection(p1,p2_ls)
ggplot() +
geom_sf(data = p1, fill = "blue", alpha = 0.4) +
geom_sf(data = p2, fill = "red", alpha = 0.4)+
geom_sf(data = st_difference(p1,p2), fill = "yellow", lwd = 2)+
theme_void()
# Chunk 8
st_relate(board[36,],board,pattern = "F***1****")
# Chunk 9
st_rook = function(a, b = a) st_relate(a, b, pattern = "F***1****")
sel36 <- st_rook(board[36,],board)[[1]]
chessplot +
geom_sf(data = board[36,], fill = "blue", alpha = 0.4)+
geom_sf(data = board[sel36,], fill = "red",alpha = 0.4)
# Chunk 10
st_relate(board[36,],board,pattern = "F***0****")
# Chunk 11
st_bishop <- function(a, b = a) st_relate(a, b, pattern = "F***0****")
sel36 <- st_bishop(board[36,],board)[[1]]
chessplot +
geom_sf(data = board[36,], fill = "blue", alpha = 0.4)+
geom_sf(data = board[sel36,], fill = "red",alpha = 0.4)
b0 = st_polygon(list(rbind(c(-1,-1), c(1,-1), c(1,1), c(-1,1), c(-1,-1))))
plot(b0)
nc = st_read(system.file("shape/nc.shp", package="sf"), quiet = TRUE)
st_relate(nc,pattern = "2********")
st_relate(nc,pattern = "2********", sparse = FALSE)
st_read(system.file("gpkg/tl.shp", package="sf"), quiet = TRUE)
system.file("gpkg/tl.shp", package="sf")
system.file("gpkg/tl.shp", package="sf")
st_read(system.file("gpkg/tl.gpkg", package="sf"), quiet = TRUE)
plot(st_read(system.file("gpkg/tl.gpkg", package="sf"), quiet = TRUE))
plot(st_read(system.file("gpkg/storms_xyz.shp", package="sf"), quiet = TRUE))
plot(st_read(system.file("shp/storms_xyz.shp", package="sf"), quiet = TRUE))
plot(st_read(system.file("shpae/storms_xyz.shp", package="sf"), quiet = TRUE))
plot(st_read(system.file("shape/storms_xyz.shp", package="sf"), quiet = TRUE))
plot(st_read(system.file("shape/storms_xyz_feature.shp", package="sf"), quiet = TRUE))
plot(st_read(system.file("shape/storms_xyzm.shp", package="sf"), quiet = TRUE))
plot(st_read(system.file("shape/storms_xyzm_feature.shp", package="sf"), quiet = TRUE))
edges <- st_multipoint(matrix(c(0,0,8,0,8,8,0,8),ncol = 2,byrow = TRUE))
board <- st_make_grid(edges,n = 8)
rnorm(10)
matrix(rnorm(10),ncol = 2)
st_point(matrix(rnorm(10),ncol = 2))
matrix(rnorm(10),ncol = 2)
matrix(rnorm(10),ncol = 2) %>%
as.data.frame()
matrix(rnorm(10),ncol = 2) %>%
as.data.frame() %>%
st_sfc(coords = c(1,2))
matrix(rnorm(10),ncol = 2) %>%
as.data.frame() %>%
st_as_sfc(coords = c(1,2))
matrix(rnorm(10),ncol = 2) %>%
as.data.frame() %>%
st_as_sf(coords = c(1,2))
matrix(rnorm(10),ncol = 2) %>%
as.data.frame() %>%
st_as_sf(coords = c(1,2)) %>%
plot()
matrix(rnorm(20),ncol = 2) %>%
as.data.frame() %>%
st_as_sf(coords = c(1,2)) %>%
plot()
set.seed(10)
matrix(rnorm(20),ncol = 2) %>%
as.data.frame() %>%
st_as_sf(coords = c(1,2)) %>%
plot()
matrix(rnorm(20),ncol = 2) %>%
as.data.frame() %>%
st_as_sf(coords = c(1,2)) %>%
st_buffer(2) %>%
plot()
matrix(rnorm(20),ncol = 2) %>%
as.data.frame() %>%
st_as_sf(coords = c(1,2)) %>%
st_buffer() %>%
plot
rnorm(20)
matrix(rnorm(20),ncol = 2) %>%
as.data.frame() %>%
st_as_sf(coords = c(1,2)) %>%
st_buffer(0.5) %>%
plot
circs <- matrix(rnorm(20),ncol = 2) %>%
as.data.frame() %>%
st_as_sf(coords = c(1,2)) %>%
st_buffer(0.5)
matrix(rnorm(20),ncol = 2) %>%
as.data.frame()
rnorm(20)
data.frame(
x = rnorm(20),
y = rnorm(20),
id = 1:20
)
data.frame(
id = 1:nrows,
x = rnorm(nrows),
y = rnorm(nrows),
) %>%
st_as_sf(coords = c(2,3)) %>%
st_buffer(0.5)
circs <- matrix(rnorm(20),ncol = 2) %>%
as.data.frame() %>%
nrows <- 20
data.frame(
id = 1:nrows,
x = rnorm(nrows),
y = rnorm(nrows),
) %>%
st_as_sf(coords = c(2,3)) %>%
st_buffer(0.5)
circs <- matrix(rnorm(20),ncol = 2) %>%
as.data.frame() %>%
nrows <- 20
nrows <- 20
data.frame(
id = 1:nrows,
x = rnorm(nrows),
y = rnorm(nrows),
) %>%
st_as_sf(coords = c(2,3)) %>%
st_buffer(0.5)
data.frame(
id = 1:nrows,
x = rnorm(nrows),
y = rnorm(nrows),
)
data.frame(
id = 1:nrows,
x = rnorm(nrows),
y = rnorm(nrows)
) %>%
st_as_sf(coords = c(2,3)) %>%
st_buffer(0.5)
data.frame(
id = 1:nrows,
x = rnorm(nrows),
y = rnorm(nrows)
) %>%
st_as_sf(coords = c(2,3)) %>%
st_buffer(0.5) %>%
plot()
nrows <- 10
data.frame(
id = 1:nrows,
x = rnorm(nrows),
y = rnorm(nrows)
) %>%
st_as_sf(coords = c(2,3)) %>%
st_buffer(0.5) %>%
plot()
data.frame(
id = 1:nrows,
x = rnorm(nrows),
y = rnorm(nrows)
) %>%
st_as_sf(coords = c(2,3)) %>%
st_buffer(0.25) %>%
plot()
data.frame(
id = 1:nrows,
x = rnorm(nrows),
y = rnorm(nrows)
) %>%
st_as_sf(coords = c(2,3)) %>%
st_buffer(0.3) %>%
plot()
set.seed(10)
nrows <- 10
data.frame(
id = 1:nrows,
x = rnorm(nrows),
y = rnorm(nrows)
) %>%
st_as_sf(coords = c(2,3)) %>%
st_buffer(0.3) %>%
plot()
set.seed(10)
nrows <- 10
data.frame(
id = 1:nrows,
x = rnorm(nrows),
y = rnorm(nrows)
) %>%
st_as_sf(coords = c(2,3)) %>%
st_buffer(0.3) %>%
plot()
circs <- data.frame(
id = 1:nrows,
x = rnorm(nrows),
y = rnorm(nrows)
) %>%
st_as_sf(coords = c(2,3)) %>%
st_buffer(0.3)
ggplot(circs) +
geom_sf()
ggplot(circs) +
geom_sf() +
geom_sf_label(aes(label = id))
ggplot(circs) +
geom_sf() +
geom_sf_text(aes(label = id))
ggplot(circs) +
geom_sf(fill = "blue",alpha = 0.3) +
geom_sf_text(aes(label = id))
ggplot(circs) +
geom_sf(fill = "blue",alpha = 0.3) +
geom_sf_text(aes(label = id)) +
theme_void()
circs <- data.frame(
id = 1:nrows,
x = rnorm(nrows),
y = rnorm(nrows)
) %>%
st_as_sf(coords = c(2,3)) %>%
st_buffer(0.25)
ggplot(circs) +
geom_sf(fill = "blue",alpha = 0.3) +
geom_sf_text(aes(label = id)) +
theme_void()
set.seed(10)
nrows <- 10
circs <- data.frame(
id = 1:nrows,
x = rnorm(nrows),
y = rnorm(nrows)
) %>%
st_as_sf(coords = c(2,3)) %>%
st_buffer(0.25)
ggplot(circs) +
geom_sf(fill = "blue",alpha = 0.3) +
geom_sf_text(aes(label = id)) +
theme_void()
set.seed(10)
nrows <- 10
circs <- data.frame(
id = 1:nrows,
x = rnorm(nrows),
y = rnorm(nrows)
) %>%
st_as_sf(coords = c(2,3)) %>%
st_buffer(0.25)
ggplot(circs) +
geom_sf(fill = "blue",alpha = 0.3) +
geom_sf_text(aes(label = id)) +
theme_void()
st_relate(circs,pattern = "2*****")
st_relate(circs,pattern = "2********")
st_relate(circs,pattern = "2********",sparse = FALSE)
st_relate(circs,pattern = "2********")
crossmatrix <- st_relate(circs,pattern = "2********",sparse = FALSE)
crossmatrix
which(crossmatrix,arr.ind = TRUE)
# Remove the diagonals since it's simply each feature tested against itself
diag(crossmatrix) <- FALSE
which(crossmatrix,arr.ind = TRUE)
sparsematrix <- which(crossmatrix,arr.ind = TRUE)
sparsematrix
circs[sparsematrix[,1],]
circsplot <- ggplot(circs) +
geom_sf(fill = "blue",alpha = 0.3) +
geom_sf_text(aes(label = id)) +
theme_void()
circsplot
circsplot +
geom_sf(data = circs[sparsematrix[,1],], fill = "red", alpha = 0.3)
sparsematrix
which(crossmatrix,arr.ind = TRUE)
# sparsematrix <-
which(crossmatrix,arr.ind = TRUE)
# sparsematrix <-
which(crossmatrix,arr.ind = TRUE) %>%
unique()
class(which(crossmatrix,arr.ind = TRUE) )
# sparsematrix <-
which(crossmatrix,arr.ind = TRUE) %>%
as.vector()
# sparsematrix <-
which(crossmatrix,arr.ind = TRUE) %>%
as.vector() %>%
unique()
error <- which(crossmatrix,arr.ind = TRUE) %>%
as.vector() %>%
unique()
circsplot +
geom_sf(data = circs[error,], fill = "red", alpha = 0.3)
shp = system.file("shape/nc.shp", package="sf")
plot(shp = system.file("shape/nc.shp", package="sf")
)
plot(shp)
shp = system.file("shape/nc.shp", package="sf")
plot(shp)
nc = st_read(system.file("shape/nc.shp", package="sf"), quiet = TRUE)
plot(nc)
st_relate(nc,pattern = "********F")
st_union(nc)
st_union(circs)
plot(st_union(circs))
View(st_union(circs))
