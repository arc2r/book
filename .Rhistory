plot(recycle_Waedi)
plot(ARE_waedi)
plot(recycle_Waedi)
plot(recycle_Waedi)
plot(recycle_Waedi)
plot(ARE_waedi, add = TRUE)
plot(recycle_Waedi)
plot(ARE_waedi, add = TRUE)
# Read raster dataset
library(raster)
library(stars)
library(sf)
library(dplyr)
library(stars)
# Insert a vector dataset that depicts the public transport connection quality in
# the city of Wädenswil and plot it
ARE_waedi <- read_sf("sample_data/Entsorgung_Waedenswil/ARE_waedenswil.shp")
# Read the raster dataset and plot it
recycle_Waedi <- raster("sample_data/Entsorgung_Waedenswil/abfall_raster.tif")
plot(recycle_Waedi)
plot(ARE_waedi, add = TRUE)
# crop the
recycle_Waedi_clip <- mask(recycle_Waedi,ARE_waedi)
# Read raster dataset
library(raster)
library(stars)
library(sf)
library(dplyr)
library(stars)
# Insert a vector dataset that depicts the public transport connection quality in
# the city of Wädenswil and plot it
ARE_waedi <- read_sf("sample_data/Entsorgung_Waedenswil/ARE_waedenswil.shp")
# Read the raster dataset and plot it
recycle_Waedi <- raster("sample_data/Entsorgung_Waedenswil/abfall_raster.tif")
plot(recycle_Waedi)
plot(ARE_waedi, add = TRUE)
# crop the
recycle_Waedi_clip <- mask(recycle_Waedi,ARE_waedi)
plot(recycle_Waedi_clip)
ggplot() + geom_stars(data = st_as_stars(recycle_Waedi_clip))
ggplot() +
geom_stars(data = st_as_stars(recycle_Waedi_clip)) +
scale_fill_gradientn(colours=c("red","green","yellow"))
ggplot() +
geom_stars(data = st_as_stars(recycle_Waedi_clip)) +
scale_fill_gradientn(colours=c("green","yellow","red"))
plot(recycle_Waedi)
plot(ARE_waedi, add = TRUE)
ggplot() +
geom_stars(data = st_as_stars(recycle_Waedi_clip)) +
scale_fill_gradientn(colours=c("red","yellow","green"))
ggplot() +
geom_stars(data = st_as_stars(recycle_Waedi_clip)) +
scale_color_viridis_c()
ggplot() +
geom_stars(data = st_as_stars(recycle_Waedi_clip)) +
scale_color_viridis_b()
ggplot() +
geom_stars(data = st_as_stars(recycle_Waedi_clip)) +
scale_fill_viridis_d()
scale_fill_gradientn(colours=c("green","yellow","red"))
ggplot() +
geom_stars(data = st_as_stars(recycle_Waedi_clip)) +
scale_fill_gradientn(colours=c("green","yellow","red"))
ggplot() +
geom_stars(data = st_as_stars(recycle_Waedi_clip)) +
scale_fill_gradientn(colours=c("green","yellow","red"))
plot(recycle_Waedi)
plot(ARE_waedi, alpha = 0.5, add = TRUE)
plot(recycle_Waedi)
plot(ARE_waedi, alpha = 1, add = TRUE)
plot(ARE_waedi, alpha = 0.5, add = TRUE)
plot(ARE_waedi, alpha = 0.5, add = TRUE)
plot(ARE_waedi, alpha = 0.5, add = TRUE)
plot(recycle_Waedi)
plot(ARE_waedi, alpha = 0.5, add = TRUE)
# ggplot() +
#   geom_stars(data = st_as_stars(recycle_Waedi_clip)) +
#   scale_fill_gradientn(colours=c("green","yellow","red"))
plot(recycle_Waedi_clip)
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("tidyverse")
install.packages("bookdown")
install.packages("tiff")
install.packages("tmap")
install.packages("rgdal")
install.packages("raster")
library(sp)
library(sf)
library(tidyverse)
library(stars)
data(meuse)
meuse_sf <- meuse %>%
st_as_sf(coords = c("x","y"))
my_idw <- function(groundtruth,column,cellsize, nmax = Inf, maxdist = Inf, idp = 2, extent = NULL){
require(gstat)
require(sf)
require(raster)
if(is.null(extent)){
extent <- groundtruth
}
samples <- st_make_grid(extent,cellsize,what = "centers") %>% st_as_sf()
my_formula <- formula(paste(column,"~1"))
idw_sf <- gstat::idw(formula = my_formula,groundtruth,newdata = samples,nmin = 1, maxdist = maxdist, idp = idp)
idw_matrix <- cbind(st_coordinates(idw_sf),idw_sf$var1.pred)
ras <- raster::rasterFromXYZ(idw_matrix)
if(all(grepl("polygon",st_geometry_type(extent),ignore.case = TRUE))){
ras <- raster::mask(ras,st_as_sf(st_zm(extent)))
}
ras
}
meuse_idw <- my_idw(meuse_sf,"copper",cellsize = 10,idp = 3)
ggplot() +
geom_stars(data = st_as_stars(meuse_idw)) +
scale_fill_viridis_c() +
theme_void() +
labs(fill = "copper") +
coord_equal()
my_krige <- function(groundtruth,column,cellsize, nmax = Inf, maxdist = Inf, extent = NULL){
require(gstat)
require(sf)
require(raster)
if(is.null(extent)){
extent <- groundtruth
}
samples <- st_make_grid(extent,cellsize,what = "centers") %>% st_as_sf()
my_formula <- formula(paste(column,"~1"))
idw_sf <- gstat::krige(formula = my_formula,groundtruth,newdata = samples,nmin = 1, maxdist = maxdist)
idw_matrix <- cbind(st_coordinates(idw_sf),idw_sf$var1.pred)
ras <- raster::rasterFromXYZ(idw_matrix)
if(all(grepl("polygon",st_geometry_type(extent),ignore.case = TRUE))){
ras <- raster::mask(ras,st_as_sf(st_zm(extent)))
}
ras
}
meuse_krige <- my_krige(meuse_sf,"copper",cellsize = 10,nmax = 30, maxdist = 500)
ggplot() +
geom_stars(data = st_as_stars(meuse_krige)) +
scale_fill_viridis_c(na.value = NA) +
theme_void() +
labs(fill = "copper") +
coord_equal()
meuse_thiessen <- st_voronoi(st_union(meuse_sf))
meuse_thiessen <- st_cast(meuse_thiessen)
meuse_bbox <- meuse_sf %>%
st_bbox() %>%
st_as_sfc()
meuse_thiessen <- st_intersection(meuse_thiessen,meuse_bbox)
meuse_thiessen <- st_as_sf(meuse_thiessen)
meuse_thiessen <- st_join(meuse_thiessen,meuse_sf)
ggplot() +
geom_sf(data = meuse_thiessen, aes(fill = copper)) +
geom_sf(data = meuse_sf) +
scale_fill_viridis_c() +
theme_void()
set.seed(10)
mypoints <- data.frame(x = rnorm(1000),y = rnorm(1000)) %>%
st_as_sf(coords = c(1,2))
plot(mypoints)
my_kde <- function(points,cellsize, bandwith, extent = NULL){
require(MASS)
require(raster)
require(sf)
if(is.null(extent)){
extent_vec <- st_bbox(points)[c(1,3,2,4)]
} else{
extent_vec <- st_bbox(extent)[c(1,3,2,4)]
}
n_y <- ceiling((extent_vec[4]-extent_vec[3])/cellsize)
n_x <- ceiling((extent_vec[2]-extent_vec[1])/cellsize)
extent_vec[2] <- extent_vec[1]+(n_x*cellsize)-cellsize
extent_vec[4] <- extent_vec[3]+(n_y*cellsize)-cellsize
coords <- st_coordinates(points)
matrix <- kde2d(coords[,1],coords[,2],h = bandwith,n = c(n_x,n_y),lims = extent_vec)
raster(matrix)
}
mypoints_kde <- my_kde(mypoints,0.01,1)
library(stars)
ggplot() +
geom_stars(data = st_as_stars(mypoints_kde)) +
geom_sf(data = mypoints, alpha = 0.2, fill = "black") +
scale_fill_viridis_c() +
labs(fill = "KDE") +
theme_void()
install.packages("terrain")
library(raster)
alt <- raster("sample_data/Raster/swissALTI3D2019.tif")
plot(alt)
alt_slope <- terrain(alt)
plot(alt_slope)
alt <- raster("sample_data/Raster/swissALTI3D2019.tif")
plot(alt)
alt_slope <- terrain(alt)
plot(alt_slope)
# Computing the aspect of the terrain dataset
swissAlti3d_aspect <- terrain(swissAlti3d, opt="slope", unit="radians")
library(raster)
swissAlti3d <- raster("sample_data/Raster/swissALTI3D2019.tif")
# Computing the aspect of the terrain dataset
swissAlti3d_aspect <- terrain(swissAlti3d, opt="slope", unit="radians")
plot(swissAlti3d_aspect)
# Computing the aspect of the terrain dataset
swissAlti3d_aspect <- terrain(swissAlti3d, opt="slope", unit="degrees")
plot(swissAlti3d_aspect)
# Computing the aspect of the terrain dataset
swissAlti3d_aspect <- terrain(swissAlti3d, opt="aspect", unit="degrees")
plot(swissAlti3d_aspect)
# Importing a raster dataset
# swissALTI3D2019.tif -- Source: https://geovite.ethz.ch
library(raster)
swissAlti3d <- raster("sample_data/Raster/swissALTI3D2019.tif")
plot(swissAlti3d,
main = "swissALTI3D2019 - CRS: CH1903+LV95",
cex.main=1,font.main=4)
summary(swissAlti3d_aspect)
# Computing the aspect of the terrain dataset
swissAlti3d_aspect <- terrain(swissAlti3d, opt="aspect", unit="degrees")
plot(swissAlti3d_aspect,
main = "Aspect of swissALTI3D2019 in degrees (°)",
cex.main=1,font.main=4)
summary(swissAlti3d_aspect)
hist(swissAlti3d_aspect)
histinfo <- hist(swissAlti3d_aspect)
histinfo$counts
histinfo$breaks
hist(swissAlti3d_aspect,
breaks = c(0, 22.5, 112.5, 202.5, 292.5, 360),
main = "Histogram with custom breaks",
xlab = "Aspect in Degrees °" , ylab = "Number of Pixels",
col = "springgreen")
hist(swissAlti3d_aspect)
hist(swissAlti3d_aspect,
breaks = c(0, 22.5, 112.5, 202.5, 292.5, 360),
main = "Histogram with custom breaks",
xlab = "Aspect in Degrees °" )
summary(swissAlti3d_aspect)
histinfo <- hist(swissAlti3d_aspect)
histinfo$counts
histinfo$breaks
# create a reclassification matrix
reclass_df <- c(0,22.5, "North",22.5,67.5, "Northeast",67.5,112.5, "East",
112.5,360, "East to North")
reclass_df
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
reclass_m
swissAlti3d_aspect_reclass <- reclassify(swissAlti3d_aspect,
reclass_m)
swissAlti3d_aspect
histinfo$breaks
# create a reclassification matrix
reclass_df <- c(0,180, "North",180,360, "South")
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
reclass_m
swissAlti3d_aspect_reclass <- reclassify(swissAlti3d_aspect,
reclass_m)
reclass_m <- matrix(as.factor(reclass_df),
ncol = 3,
byrow = TRUE)
reclass_m
swissAlti3d_aspect_reclass <- reclassify(swissAlti3d_aspect,
reclass_m)
# create a reclassification matrix
reclass_df <- c(0,180, 000000 ,180,360, 99999)
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
swissAlti3d_aspect_reclass <- reclassify(swissAlti3d_aspect,
reclass_m)
swissAlti3d_aspect_reclass
plot(swissAlti3d_aspect_reclass)
# create a reclassification matrix
reclass_df <- c(0,90,0000,90,180,1111,189,360,9999)
# convert to Matrix
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
swissAlti3d_aspect_reclass <- reclassify(swissAlti3d_aspect,
reclass_m)
# Importing a raster dataset
# swissALTI3D2019.tif -- Source: https://geovite.ethz.ch
library(raster)
swissAlti3d <- raster("sample_data/Raster/swissALTI3D2019.tif")
plot(swissAlti3d,
main = "swissALTI3D2019 - CRS: CH1903+LV95",
cex.main=1,font.main=4)
# Computing the slope of a raster dataset using the terrain() function
swissAlti3d_slope <- terrain(swissAlti3d, opt="slope", unit="degrees")
plot(swissAlti3d_slope,
main = "Slope of swissALTI3D2019 in degrees (°)",
cex.main=1,font.main=4)
# Computing the aspect of the terrain dataset
swissAlti3d_aspect <- terrain(swissAlti3d, opt="aspect", unit="degrees")
plot(swissAlti3d_aspect,
main = "Aspect of swissALTI3D2019 in degrees (°)",
cex.main=1,font.main=4)
summary(swissAlti3d_aspect)
histinfo <- hist(swissAlti3d_aspect)
histinfo$counts
histinfo$breaks
# hist(swissAlti3d_aspect,
#      breaks = c(0, 22.5, 112.5, 202.5, 292.5, 360),
#      main = "Histogram with custom breaks",
#      xlab = "Aspect in Degrees °" )
# create a reclassification matrix
reclass_df <- c(0,90,0000,90,180,1111,189,360,9999)
# convert to Matrix
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
reclass_m
# create a reclassification matrix
reclass_df <- c(0,90,0000,90,180,1111,180,360,9999)
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
reclass_m
# create a reclassification matrix
reclass_df <- c(0,90,0000,90,180,9999)
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
reclass_m <- matrix(reclass_df,
ncol = 2,
byrow = TRUE)
reclass_m
# create a reclassification matrix
reclass_df <- c(0,180, 000000 ,180,360, 99999)
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
reclass_m
# create a reclassification matrix
reclass_df <- c(0,180, 000000 ,180,270, 333333, 270,360, 99999)
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
reclass_m
swissAlti3d_aspect_reclass <- reclassify(swissAlti3d_aspect,
reclass_m)
plot(swissAlti3d_aspect_reclass)
plot(swissAlti3d_aspect_reclass, col = c("red", "blue", "green"))
# create a reclassification matrix
reclass_df <- c(0,180, 1 ,180,270, 2, 270,360, 3)
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
swissAlti3d_aspect_reclass <- reclassify(swissAlti3d_aspect,
reclass_m)
plot(swissAlti3d_aspect_reclass, col = c("red", "blue", "green"))
# create a reclassification matrix
reclass_df <- c(0,90,1,90,180,2,180,270,3,270,360,4)
reclass_m <- matrix(reclass_df,
ncol = 4,
byrow = TRUE)
reclass_m
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
reclass_m
swissAlti3d_aspect_reclass <- reclassify(swissAlti3d_aspect,
reclass_m)
plot(swissAlti3d_aspect_reclass, col = c("red", "green", "yellow","blue"))
# create a reclassification matrix
reclass_df <- c(0,90,"1",90,180,"2",180,270,"3",270,360,"4")
# convert to Matrix
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
reclass_m
swissAlti3d_aspect_reclass <- reclassify(swissAlti3d_aspect,
reclass_m)
1
# convert to Matrix
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
reclass_m
# create a reclassification matrix
reclass_df <- c(0,90,1,90,180,2,180,270,3,270,360,4)
# convert to Matrix
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
reclass_m
swissAlti3d_aspect_reclass <- reclassify(swissAlti3d_aspect,
reclass_m)
plot(swissAlti3d_aspect_reclass, col = c("red", "green", "yellow","blue"),
main = "Aspect of swissALTI3D2019 in 4 classes",
cex.main=1,font.main=4)
swissAlti3d_aspect_reclass <- reclassify(swissAlti3d_aspect,
reclass_m)
plot(swissAlti3d_aspect_reclass, col = c("red", "green", "yellow","blue"),
main = "Aspect of swissALTI3D2019 in 4 classes",
cex.main=1,font.main=4)
legend("topleft", legend=c("Line 1", "Line 2"))
# create a reclassification matrix
reclass_df <- c(0,90,0-90,90,180,90-180,180,270,180-270,270,360,4)
# convert to Matrix
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
reclass_m
# create a reclassification matrix
reclass_df <- c(0,90,1,90,180,2,180,270,3,270,360,4)
# convert to Matrix
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
reclass_m
plot(swissAlti3d_aspect_reclass, col = c("red", "green", "yellow","blue"),
main = "Aspect of swissALTI3D2019 in 4 classes",
cex.main=1,font.main=4, legend = FALSE)
swissAlti3d_aspect_reclass <- reclassify(swissAlti3d_aspect,
reclass_m)
plot(swissAlti3d_aspect_reclass, col = c("red", "green", "yellow","blue"),
main = "Aspect of swissALTI3D2019 in 4 classes",
cex.main=1,font.main=4, legend = FALSE)
legend("topright",
legend = c("0°-90°", "90°-180°", "180°-270°","270°-360°"),
fill = c("red", "blue", "green", "yellow"),
border = FALSE,
bty = "n") # turn off legend border
summary(swissAlti3d_aspect)
histinfo$breaks
library(sf)
library(tidyverse)
library(raster)
# Importing a raster dataset
# swissALTI3D2019.tif -- Source: https://geovite.ethz.ch
library(raster)
swissAlti3d <- raster("sample_data/Raster/swissALTI3D2019.tif")
plot(swissAlti3d,
main = "swissALTI3D2019 - CRS: CH1903+LV95",
cex.main=1,font.main=4)
# Computing the slope of a raster dataset using the terrain() function
swissAlti3d_slope <- terrain(swissAlti3d, opt="slope", unit="degrees")
plot(swissAlti3d_slope,
main = "Slope of swissALTI3D2019 in degrees (°)",
cex.main=1,font.main=4)
# Computing the aspect of the terrain dataset
swissAlti3d_aspect <- terrain(swissAlti3d, opt="aspect", unit="degrees")
plot(swissAlti3d_aspect,
main = "Aspect of swissALTI3D2019 in degrees (°)",
cex.main=1,font.main=4)
histinfo$breaks
summary(swissAlti3d_aspect)
histinfo$breaks
hist(swissAlti3d_aspect)
summary(swissAlti3d_aspect)
histinfo <- hist(swissAlti3d_aspect)
histinfo$breaks
count(histinfo$breaks)
histinfo$counts
library(raster)
library(terra)
r <- raster(ncol=10, nrow=10)
ncell(r)
values(r) <- 1:ncell(r)
# # inMemory(r)
values(r)[1:10]
plot(r, main='Raster with 100 cells')
f1 <- focal(r, w=matrix(1,nrow=3,ncol=3)  , fun=sum)
plot(f1)
library(raster)
library(terra)
r <- raster(ncol=10, nrow=10)
ncell(r)
values(r) <- 1:ncell(r)
# # inMemory(r)
values(r)[1:10]
plot(r, main='Raster with 100 cells')
library(terra)
r_spat <- as(r, "spatRaster")
r_spat <- as(r, "SpatRaster")
f2 <- terra::focal(r_spat,w=3,fun = "sum")
plot(f2)
f1 <- focal(r, w=matrix(1,nrow=3,ncol=3)  , fun=sum)
plot(f1)
library(terra)
r_spat <- as(r, "SpatRaster")
f2 <- terra::focal(r_spat,w=3,fun = "sum")
plot(f2)
library(raster)
library(terra)
r <- raster(ncol=10, nrow=10)
values(r) <- 1:ncell(r)
plot(r, main='Raster with 100 cells')
f1 <- focal(r, w=matrix(1,nrow=3,ncol=3)  , fun=sum)
plot(f1)
matrix
library(terra)
r_spat <- as(r, "SpatRaster")
f2 <- terra::focal(r_spat,w=3,fun = "sum")
plot(f2, main = "Raster after applying focal statistics operation")
f1 <- focal(r, w=matrix(1,nrow=3,ncol=3),fun=sum)
plot(f1, main = "Raster after applying the focal function - raster package")
plot(f1, main = "Raster after applying the focal function - raster package", cex.main =0.75)
plot(f1, main = "Raster after applying the focal function - raster package", cex.main =1)
library(terra)
r_spat <- as(r, "SpatRaster")
f2 <- terra::focal(r_spat,w=3,fun = "sum")
plot(f2, main = "Raster after applying the focal function - terra package", cex.main = 1)
library(raster)
library(terra)
r <- raster(ncol=10, nrow=10)
values(r) <- 1:ncell(r)
plot(r, main='Raster with 100 cells', cex.main = 1)
