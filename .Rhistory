plot(xx)
img_stack=stack(karteZH)
# Read raster dataset
library(raster)
library(rgdal)
karteZH <- raster("sample_data/Kanton_Zuerich/natMap_relief.tif")
plot(karteZH)
img_stack=stack(karteZH)
#then plot it an RGB raster
plotRGB(img_stack)
class(karteZH)
karteZH_df <- as.data.frame(karteZH, xy = TRUE)
ggplot() +
geom_raster(data = karteZH_df ,
aes(x = x, y = y))
library(ggplot2)
ggplot() +
geom_raster(data = karteZH_df ,
aes(x = x, y = y))
View(karteZH_df)
ggplot() +
geom_raster(data = karteZH_df ,
aes(x = x, y = y,
fill = natMap_relief))
karteZH <- raster("sample_data/Kanton_Zuerich/natMap_relief.tif")
karteZH
crs(karteZH)
crs(karteZH, asText = TRUE)
projection(karteZH, asText=TRUE)
crs(karteZH)
# Importing the dataset
library(sf)
bezirke <- read_sf("sample_data/other/bezirke.gpkg")
# Visualising the imported dataset
library(ggplot2)
ggplot() + geom_sf(data = bezirke)
# retrieving the coordinate of the imported layer
st_crs(bezirke)
# Assigning the World Geodetic System (WGS84) as a coordinate system to our dataset
bezirke <- st_set_crs(bezirke, 4326)
st_crs(bezirke)
bezirke_swiss <- st_transform(bezirke, 2056)
# retrieve the coordinate system
st_crs(bezirke_swiss)
# Read raster dataset
library(raster)
library(rgdal)
karteZH <- raster("sample_data/Kanton_Zuerich/natMap_relief.tif")
karteZH_df <- as.data.frame(karteZH, xy = TRUE)
ggplot() +
geom_raster(data = karteZH_df ,
aes(x = x, y = y,
fill = natMap_relief))
class(raster())
class(karteZH_df)
ggplot() +
geom_raster(data = karteZH)
library(stars)
ggplot() + geom_stars(data = st_as_stars(karteZH))
library(raster)
library(stars)
karteZH <- raster("sample_data/Kanton_Zuerich/natMap_relief.tif")
karteZH_df <- as.data.frame(karteZH, xy = TRUE)
ggplot() +
geom_raster(data = karteZH ,
aes(x = x, y = y,
fill = natMap_relief))
# Read raster dataset
library(raster)
library(stars)
karteZH <- raster("sample_data/Kanton_Zuerich/natMap_relief.tif")
karteZH_df <- as.data.frame(karteZH, xy = TRUE)
ggplot() +
geom_raster(data = karteZH_df ,
aes(x = x, y = y,
fill = natMap_relief))
ggplot() +
geom_raster(data = karteZH_df ,
aes(x = x, y = y))
head(karteZH_df)
ggplot() +
geom_raster(data = karteZH_df ,
aes(x = x, y = y), fill = natMap_relief)
ggplot() +
geom_raster(data = karteZH_df ,
aes(x = x, y = y), fill = natMap_relief)
ggplot() +
geom_raster(data = karteZH_df ,
aes(x = x, y = y), fill = karteZH_df$natMap_relief)
# Read raster dataset
library(raster)
library(stars)
karteZH <- raster("sample_data/Kanton_Zuerich/natMap_relief.tif")
karteZH_df <- as.data.frame(karteZH, xy = TRUE)
plotRGB(karteZH)
plotRGB(karteZH_df)
# Read raster dataset
library(raster)
library(stars)
karteZH <- raster("sample_data/Kanton_Zuerich/natMap_relief.tif")
karteZH_df <- as.data.frame(karteZH, xy = TRUE)
st_crs(karteZH_df)
projectRaster(karteZH_df,2056)
klimaZH <- raster("sample_data/Klimamodell_ZH/LH_KLIMA_PET_14H.tif")
library(raster)
library(stars)
klimaZH <- raster("sample_data/Klimamodell_ZH/LH_KLIMA_PET_14H.tif")
klimaZH_df <- as.data.frame(klimaZH, xy = TRUE)
klimaZH_df
ggplot() +
geom_raster(data = klimaZH_df ,
aes(x = x, y = y,
fill = LH_KLIMA_PET_14H))
library(ggplot2)
ggplot() +
geom_raster(data = klimaZH_df ,
aes(x = x, y = y,
fill = LH_KLIMA_PET_14H))
ggplot() +
geom_raster(data = klimaZH_df ,
aes(x = x, y = y,
fill = LH_KLIMA_PET_14H)) + coord_quickmap()
library(sf)
# Read raster dataset
library(raster)
library(stars)
library(sf)
disposalPoints <- read_sf("sample_data/Entsorgung_Waedenswil/abfallentsorgung_waedenswil.gpkg")
View(disposalPoints)
recycle_Waedi <- raster("sample_data/Entsorgung_Waedenswil/abfall_raster.tif")
ggplot() +
geom_sf(data = disposalPoints) + geom_raster(data = recycle_Waedi)
ggplot() +
geom_sf(data = disposalPoints) + geom_raster(data = as.data.frame(recycle_Waedi))
coordinates(disposalPoints)
st_coordinates(disposalPoints)
library(dplyr)
disposalPoints %>%
mutate(
X = st_coordinates(.)[1],
Y = st_coordinates(.)[2]
)
View(disposalPoints)
library(raster)
library(stars)
library(sf)
library(dplyr)
disposalPoints <- read_sf("sample_data/Entsorgung_Waedenswil/abfallentsorgung_waedenswil.gpkg")
disposalPoints <- disposalPoints %>%
mutate(
X = st_coordinates(.)[1],
Y = st_coordinates(.)[2]
)
recycle_Waedi <- raster("sample_data/Entsorgung_Waedenswil/abfall_raster.tif")
View(disposalPoints)
ggplot() + geom_sf(data = disposalPoints)
ggplot() + geom_sf(data = disposalPoints) + coord_sf(datum = 2056)
# Convert the raster dataset to a datafram
recycle_Waedi_df <- as.data.frame(recycle_Waedi)
View(recycle_Waedi_df)
ggplot() + geom_raster(recycle_Waedi_df, aes(fill = abfall_raster))
class(recycle_Waedi)
plot(recycle_Waedi)
ggplot() + geom_sf(recycle_Waedi)
ggplot(recycle_Waedi) + geom_raster()
View(recycle_Waedi)
library(stars)
ggplot() + geom_stars(data = st_as_stars(recycle_Waedi))
ggplot() + geom_stars(data = st_as_stars(recycle_Waedi)) + scale_fill_viridis(na.value="white")
# Convert the raster dataset to a stars object in order to plot it with ggplot
recycle_Waedi <- st_as_stars(recycle_Waedi)
ggplot() + geom_stars(data = recycle_Waedi) +
geom_sf(data = disposalPoints, color = "red")
ggplot() + geom_stars(data = recycle_Waedi) +
geom_sf(data = disposalPoints, color = "red") +
coord_sf(datum = 2056)
ggplot() + geom_stars(data = recycle_Waedi) +
geom_sf(data = disposalPoints, color = "red") +
coord_sf(datum = 2056) +
scale_fill_gradientn(colours=c("#0000FFFF","#FFFFFFFF","#FF0000FF"))
ggplot() + geom_stars(data = recycle_Waedi) +
geom_sf(data = disposalPoints, color = "red") +
coord_sf(datum = 2056) +
scale_fill_gradientn(colours=c("#0000FFFF","#FFFFFFFF","#FF0000FF")) +
theme_classic()
ggplot() + geom_stars(data = recycle_Waedi) +
geom_sf(data = disposalPoints, color = "red") +
coord_sf(datum = 2056) +
scale_fill_gradientn(colours=c("#0000FFFF","#FFFFFFFF","#FF0000FF")) +
theme_dark()
ggplot() + geom_stars(data = recycle_Waedi) +
geom_sf(data = disposalPoints, color = "red") +
coord_sf(datum = 2056) +
scale_fill_gradientn(colours=c("#0000FFFF","#FFFFFFFF","#FF0000FF"))
ggplot() + geom_stars(data = recycle_Waedi) +
geom_sf(data = disposalPoints, color = "red") +
coord_sf(datum = 2056) +
scale_fill_gradientn(colours=c("#1bc906","#ef7070","#f30202"))
ggplot() + geom_stars(data = recycle_Waedi) +
geom_sf(data = disposalPoints, color = "yellow") +
coord_sf(datum = 2056) +
scale_fill_gradientn(colours=c("#1bc906","#ef7070","#f30202"))
ggplot() + geom_stars(data = recycle_Waedi) +
geom_sf(data = disposalPoints, color = "blue") +
coord_sf(datum = 2056) +
scale_fill_gradientn(colours=c("#1bc906","#ef7070","#f30202"))
View(disposalPoints)
View(recycle_Waedi)
View(recycle_Waedi_df)
recycle_Waedi_wgs84 <- projectRaster(recycle_Waedi,4326)
recycle_Waedi_wgs84 <- projectRaster(recycle_Waedi,crs = 4326)
crs(recycle_Waedi)
recycle_Waedi
recycle_Waedi
st_set_crs(recycle_Waedi,2056)
crs(recycle_Waedi)
st_crs(recycle_Waedi)
st_transform(recycle_Waedi,2056)
st_crs(recycle_Waedi)
library(raster)
library(stars)
library(sf)
library(dplyr)
library(stars)
# Insert all the locations for recycling in the city of W채denswil
disposalPoints <- read_sf("sample_data/Entsorgung_Waedenswil/abfallentsorgung_waedenswil.gpkg")
disposalPoints <- disposalPoints %>%
mutate(
X = st_coordinates(.)[1],
Y = st_coordinates(.)[2]
)
# Read the raster dataset
recycle_Waedi <- raster("sample_data/Entsorgung_Waedenswil/abfall_raster.tif")
crs(recycle_Waedi)
projectRaster(recycle_Waedi,crs = 2056)
projectRaster(recycle_Waedi,crs = "2056")
crs(recycle_Waedi)
# Insert a vector dataset that depicts the public transport connection quality in
# the city of W채denswil
ARE_waedi <- read_sf("sample_data/Entsorgung_Waedenswil/ARE_waedenswil.shp")
# Read the raster dataset
recycle_Waedi <- raster("sample_data/Entsorgung_Waedenswil/abfall_raster.tif")
# Convert the raster dataset to a stars object in order to plot it with ggplot
recycle_Waedi <- st_as_stars(recycle_Waedi)
ggplot() + geom_stars(data = recycle_Waedi) +
geom_sf(data = ARE_waedi, color = "blue") +
coord_sf(datum = 2056) +
scale_fill_gradientn(colours=c("#1bc906","#ef7070","#f30202"))
ggplot() + geom_stars(data = recycle_Waedi) +
geom_sf(data = ARE_waedi, color = "blue") +
coord_sf(datum = 2056)
ggplot() + geom_stars(data = recycle_Waedi) +
geom_sf(data = ARE_waedi) +
coord_sf(datum = 2056)
ggplot() + geom_stars(data = recycle_Waedi) +
geom_sf(data = ARE_waedi, color = "grey") +
coord_sf(datum = 2056)
ggplot() + geom_stars(data = recycle_Waedi) +
geom_sf(data = ARE_waedi, color = "grey", alpha = 0.5) +
coord_sf(datum = 2056)
# crop the
test <- crop(recycle_Waedi, ARE_waedi)
# crop the
test <- crop(st_rasterize(recycle_Waedi), ARE_waedi)
library(raster)
library(stars)
library(sf)
library(dplyr)
library(stars)
# Insert a vector dataset that depicts the public transport connection quality in
# the city of W채denswil
ARE_waedi <- read_sf("sample_data/Entsorgung_Waedenswil/ARE_waedenswil.shp")
# Read the raster dataset
recycle_Waedi <- raster("sample_data/Entsorgung_Waedenswil/abfall_raster.tif")
# crop the
test <- crop(recycle_Waedi, ARE_waedi)
plot(test)
library(raster)
library(stars)
library(sf)
library(dplyr)
library(stars)
# Insert a vector dataset that depicts the public transport connection quality in
# the city of W채denswil
ARE_waedi <- read_sf("sample_data/Entsorgung_Waedenswil/ARE_waedenswil.shp")
# Read the raster dataset
recycle_Waedi <- raster("sample_data/Entsorgung_Waedenswil/abfall_raster.tif")
# crop the
test <- crop(recycle_Waedi, ARE_waedi)
View(recycle_Waedi)
View(test)
View(recycle_Waedi)
View(test)
View(recycle_Waedi)
View(test)
testStar <- st_as_stars(test)
ggplot() + geom_stars(data = test)
ggplot() + geom_stars(data = testStar)
# crop the
rr <- mask(recycle_Waedi,ARE_waedi)
plot(rr)
plot(recycle_Waedi)
plot(ARE_waedi)
plot(ARE_waedi$KLASSE)
plot(ARE_waedi)
ggplot() + geom_sf(data = ARE_waedi)
as.data.frame(recycle_Waedi)
as.data.frame(values = recycle_Waedi)
as.data.frame("values" = recycle_Waedi)
plot(ARE_waedi)
plot(ARE_waedi$KLASSE)
plot(ARE_waedi$geometry)
plot(ARE_waedi$geometry, color = "red")
ggplot(data = recycle_Waedi) + geom_raster()
ggplot(data = ggGS(recycle_Waedi)) + geom_raster()
INSTA
install.packages("grainscape")
library(grainscape)
ggplot(data = ggGS(recycle_Waedi)) + geom_raster()
plot(ARE_waedi)
par(new=TRUE)
plot(recycle_Waedi)
plot(recycle_Waedi)
plot(ARE_waedi)
plot(recycle_Waedi)
par(new=TRUE)
plot(ARE_waedi)
plot(recycle_Waedi)
plot(ARE_waedi)
plot(recycle_Waedi)
plot(recycle_Waedi)
plot(recycle_Waedi)
plot(ARE_waedi, add = TRUE)
plot(recycle_Waedi)
plot(ARE_waedi, add = TRUE)
# Read raster dataset
library(raster)
library(stars)
library(sf)
library(dplyr)
library(stars)
# Insert a vector dataset that depicts the public transport connection quality in
# the city of W채denswil and plot it
ARE_waedi <- read_sf("sample_data/Entsorgung_Waedenswil/ARE_waedenswil.shp")
# Read the raster dataset and plot it
recycle_Waedi <- raster("sample_data/Entsorgung_Waedenswil/abfall_raster.tif")
plot(recycle_Waedi)
plot(ARE_waedi, add = TRUE)
# crop the
recycle_Waedi_clip <- mask(recycle_Waedi,ARE_waedi)
# Read raster dataset
library(raster)
library(stars)
library(sf)
library(dplyr)
library(stars)
# Insert a vector dataset that depicts the public transport connection quality in
# the city of W채denswil and plot it
ARE_waedi <- read_sf("sample_data/Entsorgung_Waedenswil/ARE_waedenswil.shp")
# Read the raster dataset and plot it
recycle_Waedi <- raster("sample_data/Entsorgung_Waedenswil/abfall_raster.tif")
plot(recycle_Waedi)
plot(ARE_waedi, add = TRUE)
# crop the
recycle_Waedi_clip <- mask(recycle_Waedi,ARE_waedi)
plot(recycle_Waedi_clip)
ggplot() + geom_stars(data = st_as_stars(recycle_Waedi_clip))
ggplot() +
geom_stars(data = st_as_stars(recycle_Waedi_clip)) +
scale_fill_gradientn(colours=c("red","green","yellow"))
ggplot() +
geom_stars(data = st_as_stars(recycle_Waedi_clip)) +
scale_fill_gradientn(colours=c("green","yellow","red"))
plot(recycle_Waedi)
plot(ARE_waedi, add = TRUE)
ggplot() +
geom_stars(data = st_as_stars(recycle_Waedi_clip)) +
scale_fill_gradientn(colours=c("red","yellow","green"))
ggplot() +
geom_stars(data = st_as_stars(recycle_Waedi_clip)) +
scale_color_viridis_c()
ggplot() +
geom_stars(data = st_as_stars(recycle_Waedi_clip)) +
scale_color_viridis_b()
ggplot() +
geom_stars(data = st_as_stars(recycle_Waedi_clip)) +
scale_fill_viridis_d()
scale_fill_gradientn(colours=c("green","yellow","red"))
ggplot() +
geom_stars(data = st_as_stars(recycle_Waedi_clip)) +
scale_fill_gradientn(colours=c("green","yellow","red"))
ggplot() +
geom_stars(data = st_as_stars(recycle_Waedi_clip)) +
scale_fill_gradientn(colours=c("green","yellow","red"))
plot(recycle_Waedi)
plot(ARE_waedi, alpha = 0.5, add = TRUE)
plot(recycle_Waedi)
plot(ARE_waedi, alpha = 1, add = TRUE)
plot(ARE_waedi, alpha = 0.5, add = TRUE)
plot(ARE_waedi, alpha = 0.5, add = TRUE)
plot(ARE_waedi, alpha = 0.5, add = TRUE)
plot(recycle_Waedi)
plot(ARE_waedi, alpha = 0.5, add = TRUE)
# ggplot() +
#   geom_stars(data = st_as_stars(recycle_Waedi_clip)) +
#   scale_fill_gradientn(colours=c("green","yellow","red"))
plot(recycle_Waedi_clip)
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("tidyverse")
install.packages("bookdown")
install.packages("tiff")
install.packages("tmap")
install.packages("rgdal")
install.packages("raster")
library(sp)
library(sf)
library(tidyverse)
library(stars)
data(meuse)
meuse_sf <- meuse %>%
st_as_sf(coords = c("x","y"))
my_idw <- function(groundtruth,column,cellsize, nmax = Inf, maxdist = Inf, idp = 2, extent = NULL){
require(gstat)
require(sf)
require(raster)
if(is.null(extent)){
extent <- groundtruth
}
samples <- st_make_grid(extent,cellsize,what = "centers") %>% st_as_sf()
my_formula <- formula(paste(column,"~1"))
idw_sf <- gstat::idw(formula = my_formula,groundtruth,newdata = samples,nmin = 1, maxdist = maxdist, idp = idp)
idw_matrix <- cbind(st_coordinates(idw_sf),idw_sf$var1.pred)
ras <- raster::rasterFromXYZ(idw_matrix)
if(all(grepl("polygon",st_geometry_type(extent),ignore.case = TRUE))){
ras <- raster::mask(ras,st_as_sf(st_zm(extent)))
}
ras
}
meuse_idw <- my_idw(meuse_sf,"copper",cellsize = 10,idp = 3)
ggplot() +
geom_stars(data = st_as_stars(meuse_idw)) +
scale_fill_viridis_c() +
theme_void() +
labs(fill = "copper") +
coord_equal()
my_krige <- function(groundtruth,column,cellsize, nmax = Inf, maxdist = Inf, extent = NULL){
require(gstat)
require(sf)
require(raster)
if(is.null(extent)){
extent <- groundtruth
}
samples <- st_make_grid(extent,cellsize,what = "centers") %>% st_as_sf()
my_formula <- formula(paste(column,"~1"))
idw_sf <- gstat::krige(formula = my_formula,groundtruth,newdata = samples,nmin = 1, maxdist = maxdist)
idw_matrix <- cbind(st_coordinates(idw_sf),idw_sf$var1.pred)
ras <- raster::rasterFromXYZ(idw_matrix)
if(all(grepl("polygon",st_geometry_type(extent),ignore.case = TRUE))){
ras <- raster::mask(ras,st_as_sf(st_zm(extent)))
}
ras
}
meuse_krige <- my_krige(meuse_sf,"copper",cellsize = 10,nmax = 30, maxdist = 500)
ggplot() +
geom_stars(data = st_as_stars(meuse_krige)) +
scale_fill_viridis_c(na.value = NA) +
theme_void() +
labs(fill = "copper") +
coord_equal()
meuse_thiessen <- st_voronoi(st_union(meuse_sf))
meuse_thiessen <- st_cast(meuse_thiessen)
meuse_bbox <- meuse_sf %>%
st_bbox() %>%
st_as_sfc()
meuse_thiessen <- st_intersection(meuse_thiessen,meuse_bbox)
meuse_thiessen <- st_as_sf(meuse_thiessen)
meuse_thiessen <- st_join(meuse_thiessen,meuse_sf)
ggplot() +
geom_sf(data = meuse_thiessen, aes(fill = copper)) +
geom_sf(data = meuse_sf) +
scale_fill_viridis_c() +
theme_void()
set.seed(10)
mypoints <- data.frame(x = rnorm(1000),y = rnorm(1000)) %>%
st_as_sf(coords = c(1,2))
plot(mypoints)
my_kde <- function(points,cellsize, bandwith, extent = NULL){
require(MASS)
require(raster)
require(sf)
if(is.null(extent)){
extent_vec <- st_bbox(points)[c(1,3,2,4)]
} else{
extent_vec <- st_bbox(extent)[c(1,3,2,4)]
}
n_y <- ceiling((extent_vec[4]-extent_vec[3])/cellsize)
n_x <- ceiling((extent_vec[2]-extent_vec[1])/cellsize)
extent_vec[2] <- extent_vec[1]+(n_x*cellsize)-cellsize
extent_vec[4] <- extent_vec[3]+(n_y*cellsize)-cellsize
coords <- st_coordinates(points)
matrix <- kde2d(coords[,1],coords[,2],h = bandwith,n = c(n_x,n_y),lims = extent_vec)
raster(matrix)
}
mypoints_kde <- my_kde(mypoints,0.01,1)
library(stars)
ggplot() +
geom_stars(data = st_as_stars(mypoints_kde)) +
geom_sf(data = mypoints, alpha = 0.2, fill = "black") +
scale_fill_viridis_c() +
labs(fill = "KDE") +
theme_void()
