imap_dfr(x, function(y,toolset){tibble(tool = y, toolset = toolset)}) %>%
mutate(toolbox = toolbox)
})
tools_toodo_yaml <- read_yaml("auxiliary_files/tools_todo.yaml")
tools_toodo_yaml
imap(tools_toodo_yaml, function(x){})
imap(tools_toodo_yaml, function(x,y){})
tools_toodo_yaml
imap(tools_toodo_yaml, function(toolbox,toolsets){toolsets})
imap(tools_toodo_yaml, function(toolsets,toolbox){toolbox})
imap(tools_toodo_yaml, function(toolsets,toolbox){toolsets})
tools_toodo_yaml
imap(tools_toodo_yaml, function(toolsets,toolbox){
data.tree::FromListSimple(toolsets)
})
class(data.tree::FromListSimple(toolsets))
imap(tools_toodo_yaml, function(toolsets,toolbox){
class(toolsets)
})
imap(tools_toodo_yaml, function(toolsets,toolbox){
FromListSimple(toolsets)
})
imap(tools_toodo_yaml, function(toolsets,toolbox){
sdf <- FromListSimple(toolsets)
print(sdf)
})
tools_toodo_yaml
FromListSimple(tools_toodo_yaml)
tools_toodo_yaml[[1]]
FromListSimple(tools_toodo_yaml[[1]])
FromListExplicit(tools_toodo_yaml[[1]])
FromListExplicit(list(sdf = tools_toodo_yaml[[1]]))
FromListSimple(list(sdf = tools_toodo_yaml[[1]]))
list(sdf = tools_toodo_yaml[[1]])
FromListSimple(list(sdf = tools_toodo_yaml[[1]]))
FromListSimple(list(sdf = tools_toodo_yaml))
tools_toodo_yaml
FromListSimple(tools_toodo_yaml)
tools_toodo_yaml
list(root = tools_toodo_yaml)
FromListSimple(list(root = tools_toodo_yaml))
FromListSimple(list(rootsdf = tools_toodo_yaml))
?FromListSimple
kingJosephs <- list(name = "Joseph I",
spouse = "Mary",
born = "1818-02-23",
died = "1839-08-29",
children = list(
list(name = "Joseph II",
spouse = "Kathryn",
born = "1839-03-28",
died = "1865-12-19"),
list(name = "Helen",
born = "1840-17-08",
died = "1845-01-01")
)
)
FromListExplicit(kingJosephs)
tools_todo_df
tools_toodo_yaml
map(tools_toodo_yaml, function(x){map(function(y){list(y)})})
map(tools_toodo_yaml, function(x){x, map(function(y){list(y)})})
map(tools_toodo_yaml, function(x){map(x, function(y){list(y)})})
sdf <- map(tools_toodo_yaml, function(x){map(x, function(y){list(y)})})
sdf
FromListSimple(sdf)
yaml::write_yaml(sdf, "test.yaml")
tools_toodo_yaml2 <- map(tools_toodo_yaml, function(x){map(x, function(y){list(y)})})
imap(tools_toodo_yaml2, function(toolsets,toolbox){
sdf <- FromListSimple(toolsets)
print(sdf)
})
imap(tools_toodo_yaml2, function(toolsets,toolbox){
FromListSimple(toolsets)
})
FromListSimple(list(sdf = toolsets))
imap(tools_toodo_yaml2, function(toolsets,toolbox){
FromListSimple(list(sdf = toolsets))
})
tools_toodo_yaml2
tools_toodo_yaml2
FromListSimple(tools_toodo_yaml2)
tools_toodo_yaml2[[1]]
tools_toodo_yaml2[[1]][[1]]
tools_toodo_yaml2[[1]][[1]][[1]]
list(tools_toodo_yaml2[[1]][[1]][[1]])
tools_toodo_yaml2 <- map(tools_toodo_yaml, function(x){map(x, function(y){as.list(y)})})
imap(tools_toodo_yaml2, function(toolsets,toolbox){
FromListSimple(list(sdf = toolsets))
})
FromListSimple(tools_toodo_yaml2)
tools_toodo_yaml2[[1]][[1]]
tools_toodo_yaml[[1]][[1]]
as.list(tools_toodo_yaml[[1]][[1]])
tools_toodo_yaml2 <- map(tools_toodo_yaml, function(x){map(x, function(y){as.list(y)})})
tools_toodo_yaml2[[1]][[1]]
imap(tools_toodo_yaml2, function(toolsets,toolbox){
FromListSimple(list(sdf = toolsets))
})
imap(tools_toodo_yaml2, function(toolsets,toolbox){
FromListSimple(toolsets)
})
FromListSimple(tools_toodo_yaml2)
tools_toodo_yaml2
FromListSimple(tools_toodo_yaml2)
FromListExplicit(sdf)
FromListExplicit(tools_toodo_yaml2)
map(tools_toodo_yaml, function(x){as.list(x)})
tools_toodo_yaml2 <- map(tools_toodo_yaml, function(x){as.list(x)})
FromListSimple(tools_toodo_yaml2)
tools_toodo_yaml2
tools_toodo_yaml2[[1]]
tools_toodo_yaml2[[1]][[1]]
as.list(tools_toodo_yaml2[[1]][[1]])
tools_toodo_yaml2 <- map(tools_toodo_yaml, function(x){map(x, function(y){as.list(y = y)})})
FromListSimple(tools_toodo_yaml2)
tools_toodo_yaml2 <- map(tools_toodo_yaml, function(x){map(x, function(y){list(y = y)})})
FromListSimple(tools_toodo_yaml2)
tools_toodo_yaml2 <- map(tools_toodo_yaml, function(x){map(x, function(y){map(y, function(z){as.list(name = z})})
tools_toodo_yaml2 <- map(tools_toodo_yaml, function(x){map(x, function(y){map(y, function(z){as.list(name = z)})})})
map(tools_toodo_yaml, function(x){map(x, function(y){map(y, function(z){map(z, as.list(name = z))})})})
map(tools_toodo_yaml, function(x){x})
map(tools_toodo_yaml, function(x){map(x, function(y){y})})
map(tools_toodo_yaml, function(x){map(x, function(y){map(y, function(z){z})})})
map(tools_toodo_yaml, function(x){map(x, function(y){map(y, function(z){list(name = z)})})})
tools_toodo_yaml2 <- map(tools_toodo_yaml, function(x){map(x, function(y){map(y, function(z){list(name = z)})})})
FromListSimple(tools_toodo_yaml2)
tools_toodo_yaml2 <- map(tools_toodo_yaml, function(x){map(x, function(y){map(y, function(z){list(name = z)})})})
FromListSimple(tools_toodo_yaml2)
tools_toodo <- read_yaml("auxiliary_files/tools_todo.yaml")
tools_toodo2 <- map(tools_toodo_yaml, function(x){map(x, function(y){map(y, function(z){list(name = z)})})})
imap(tools_toodo2, function(toolsets,toolbox){
FromListSimple(toolsets)
})
toolset_tree <- FromListSimple(toolsets)
imap(tools_toodo2, function(toolsets,toolbox){
toolset_tree <- FromListSimple(toolsets)
})
imap(tools_toodo2, function(toolsets,toolbox){
toolset_tree <- FromListSimple(toolsets)
diagonalNetwork(toolset_tree)
})
imap(tools_toodo2, function(toolsets,toolbox){
toolset_tree <- FromListSimple(toolsets)
diagonalNetwork(toolsets)
})
diagonalNetwork(tools_toodo2)
tools_toodo2
?diagonalNetwork
diagonalNetwork(list(root = tools_toodo2))
ToListExplicit(tools_toodo2)
ToListExplicit(tools_toodo2) -> toolset_tree
FromListSimple(tools_toodo2) -> toolset_tree
ToListExplicit(toolset_tree)
ToListExplicit(toolset_tree, unname = TRUE)
imap(tools_toodo2, function(toolsets,toolbox){
toolset_tree <- FromListSimple(toolsets) %>%
ToListExplicit()
diagonalNetwork(toolsets)
})
toolset_tree <- FromListSimple(toolsets) %>%
ToListExplicit(unname = TRUE)
imap(tools_toodo2, function(toolsets,toolbox){
toolset_tree <- FromListSimple(toolsets) %>%
ToListExplicit(unname = TRUE)
diagonalNetwork(toolsets)
})
FromListSimple(tools_toodo2) %>%
ToListExplicit(toolset_tree, unname = TRUE)
FromListSimple(tools_toodo2)
FromListSimple(tools_toodo2) %>%
ToListExplicit(unname = TRUE)
FromListSimple(tools_toodo2) %>%
ToListExplicit(unname = TRUE) %>%
diagonalNetwork()
imap(tools_toodo2, function(toolsets,toolbox){
FromListSimple(toolsets) %>%
ToListExplicit(unname = TRUE) %>%
diagonalNetwork()
})
imap(tools_toodo2, function(toolsets,toolbox){
FromListSimple(toolsets) %>%
ToListExplicit(unname = TRUE) %>%
diagonalNetwork() %>%
networkD3::saveNetwork("network.html")
webshot::webshot("network.html",paste0(toolbox,".png"))
})
tools_toodo <- read_yaml("auxiliary_files/tools_todo.yaml")
imap(tools_toodo2, function(toolsets,toolbox){
FromListSimple(toolsets) %>%
ToListExplicit(unname = TRUE) %>%
diagonalNetwork() %>%
networkD3::saveNetwork("network.html")
webshot::webshot("network.html",file.path("images",paste0(toolbox,".png")))
file.remove("network.html")
imap(toolsets,function(tools,toolset){
FromListSimple(tools) %>%
ToListExplicit(unname = TRUE) %>%
diagonalNetwork() %>%
networkD3::saveNetwork("network.html")
webshot::webshot("network.html",file.path("images",paste0(toolbox,"_",toolset,".png")))
file.remove("network.html")
})
})
tools_toodo <- read_yaml("auxiliary_files/tools_todo.yaml")
tools_toodo2 <- map(tools_toodo_yaml, function(x){map(x, function(y){map(y, function(z){list(name = z)})})})
FromListSimple(tools_toodo2) %>%
ToListExplicit(unname = TRUE) %>%
diagonalNetwork()
FromListSimple(list(lksdf = tools_toodo2)) %>%
ToListExplicit(unname = TRUE) %>%
diagonalNetwork()
FromListSimple(list(lksdf = tools_toodo2))
FromListSimple(list(lksdf = tools_toodo2),nameName = "sdfa") %>%
ToListExplicit(unname = TRUE) %>%
diagonalNetwork()
FromListSimple(list(lksdf = tools_toodo2),nodeName =  = "sdfa") %>%
ToListExplicit(unname = TRUE) %>%
diagonalNetwork()
FromListSimple(list(lksdf = tools_toodo2),nodeName =  "sdfa") %>%
ToListExplicit(unname = TRUE) %>%
diagonalNetwork()
FromListSimple(tools_toodo2,nodeName =  "sdfa") %>%
ToListExplicit(unname = TRUE) %>%
diagonalNetwork()
FromListSimple(tools_toodo2,nodeName =  "GeoprocessingTools") %>%
ToListExplicit(unname = TRUE) %>%
diagonalNetwork()
imap(tools_toodo2, function(toolsets,toolbox){
FromListSimple(toolsets,nodeName = toolbox) %>%
ToListExplicit(unname = TRUE) %>%
diagonalNetwork() %>%
networkD3::saveNetwork("network.html")
webshot::webshot("network.html",file.path("images","network",paste0(toolbox,".png")))
file.remove("network.html")
imap(toolsets,function(tools,toolset){
FromListSimple(tools,nodeName = toolset) %>%
ToListExplicit(unname = TRUE) %>%
diagonalNetwork() %>%
networkD3::saveNetwork("network.html")
webshot::webshot("network.html",file.path("images","network",paste0(toolbox,"_",toolset,".png")))
file.remove("network.html")
})
})
read.dcf("DESCRIPTION")
dsdf <- read.dcf("DESCRIPTION")
dsdf[1,"Imports"]
descr <- read.dcf("DESCRIPTION")
descr_imports <- descr[1,"Imports"]
descr_suggests <- descr[1,"Suggests"]
descr_suggests
descr_imports
descr_imports
class(descr_imports)
str_split(descr_imports, ",\n")
str_split(c(descr_imports,descr_suggests), ",\n")
str_split(c(descr_imports,descr_suggests), ",\n") %>% unlist()
packages_book <- str_split(c(descr_imports,descr_suggests), ",\n") %>% unlist()
packages_book == "arc2r"
packages_book[!packages_book == "arc2r"]
remotes::parse_github_repo_spec("arc2r/arc2r")
read.dcf("https://raw.githubusercontent.com/arc2r/arc2r/master/DESCRIPTION")
read.dcf(url("https://raw.githubusercontent.com/arc2r/arc2r/master/DESCRIPTION"))
descr_data <- read.dcf(url("https://raw.githubusercontent.com/arc2r/arc2r/master/DESCRIPTION"))
descr_data_imports <- descr_data[1,"Imports"]
descr_data_imports
descr_data_ suggests <- descr_data[1,"Suggests"]
descr_data_suggests <- descr_data[1,"Suggests"]
descr_data_suggests
c(descr_imports,descr_suggests)
packages_data <- str_split(c(descr_data_imports,descr_data_suggests), ",\n") %>% unlist()
packages_data
descr_data_imports
descr_data_suggests
str_split(c(descr_data_imports,descr_data_suggests), ",") %>% unlist()
packages_data <- str_split(c(descr_data_imports,descr_data_suggests), ",") %>% unlist() %>% str_trim(side = "both")
packages_data
packages_book <- packages_book[!packages_book == "arc2r"]
packages_book
c(packages_data, packages_book)
knitr::write_bib(c(packages_data, packages_book),"")
knitr::write_bib(c(packages_data, packages_book)) %>%
c("test",.)
knitr::write_bib(c(packages_data, packages_book)) %>%
readLines()
knitr::write_bib(c(packages_data, packages_book)) %>%
cat()
knitr::write_bib(c(packages_data, packages_book))
knitr::write_bib(c(packages_data, packages_book)) %>% class()
knitr::write_bib(c(packages_data, packages_book),"bibliography/packages.bib")
readLines("bibliography/packages.bib)
readLines("bibliography/packages.bib")
readLines("bibliography/packages.bib")
lines_read <- readLines("bibliography/packages.bib")
c("care",lines_read)
packages_data <- str_split(c(descr_data_imports,descr_data_suggests), ",") %>% unlist() %>% str_trim(side = "both")
knitr::write_bib(c(packages_data, packages_book),"bibliography/packages.bib")
readLines("bibliography/packages.bib")
readLines("bibliography/packages.bib") %>%
c("% Generated automatically: do not edit by hand",
"% Please edit R-script in R/generate_bibliography.Rmd",
.) %>%
write_lines("bibliography/packages.bib")
?write_bib
rmarkdown::render("Readme.Rmd")
rmarkdown::render("Readme.Rmd")
rmarkdown::render("Readme.Rmd","github_document")
rmarkdown::render("Readme.Rmd","github_document")
library(here)
library(shiny)
bookdown_yaml = "_bookdown.yml"
require(yaml)
read_yaml(bookdown_yaml)
read_yaml(bookdown_yaml)$rmdfiles
bookdown_yaml_read <- read_yaml(bookdown_yaml)
bookdown_yaml_read$rmd_files
file.exists(bookdown_yaml_read$rmd_files)
rmd_files <- bookdown_yaml_read$rmd_files
rmd_files[file.exists(rmd_files)]
file.exists(rmd_files)
existing <- file.exists(rmd_files)
any(!existing)
rmd_files[file.exists(rmd_files)]
rmd_files[!existing]
check_rmdfiles <- function(bookdown_yaml = "_bookdown.yml") {
require(yaml)
bookdown_yaml_read <- read_yaml(bookdown_yaml)
rmd_files <- bookdown_yaml_read$rmd_files
existing <- file.exists(rmd_files)
if(any(!existing)){
print("The following files do not exist:")
rmd_files[!existing]
} else{
print("all good, all files specified in bookdown_yaml exist")
}
}
check_rmdfiles()
check_rmdfiles()
rmd_files[!existing]
bookdown_yaml_read <- read_yaml(bookdown_yaml)
rmd_files <- bookdown_yaml_read$rmd_files
existing <- file.exists(rmd_files)
rmd_files[!existing]
rmd_files[!existing]
check_rmdfiles()
check_rmdfiles()
check_rmdfiles_exists <- function(bookdown_yaml = "_bookdown.yml") {
require(yaml)
bookdown_yaml_read <- read_yaml(bookdown_yaml)
rmd_files <- bookdown_yaml_read$rmd_files
existing <- file.exists(rmd_files)
if(any(!existing)){
print("The following files do not exist:")
rmd_files[!existing]
} else{
print("all good, all files specified in bookdown_yaml exist")
}
}
list.files(pattern = ".Rmd")
list.files(pattern = ".Rmd",full.names = TRUE)
list.files(pattern = ".Rmd",full.names = TRUE,recursive = TRUE)
rmd_files_all <- list.files(pattern = ".Rmd",full.names = TRUE,recursive = TRUE)
rmd_files
rmd_files_all <- list.files(pattern = ".Rmd",full.names = TRUE,recursive = TRUE) %>% str_remove("./")
rmd_files_all
rmd_files_all
?diff
rmd_files
"inde.Rmd" %in% rmd_files
rmd_files_all %in% rmd_files
existing <- rmd_files_all %in% rmd_files
existing <- rmd_files_all %in% rmd_files
rmd_files_all[!existing]
check_rmdfiles_missing <- function(bookdown_yaml = "_bookdown.yml") {
require(yaml)
require(stringr)
bookdown_yaml_read <- read_yaml(bookdown_yaml)
rmd_files <- bookdown_yaml_read$rmd_files
rmd_files_all <- list.files(pattern = ".Rmd",full.names = TRUE,recursive = TRUE) %>% str_remove("./")
existing <- rmd_files_all %in% rmd_files
if(any(!existing)){
print("The following files exist in you project but are not listed in your bookdown_yaml")
rmd_files_all[!existing]
} else{
print("all good, all files specified in bookdown_yaml exist")
}
}
check_rmdfiles_missing()
check_rmdfiles_missing()
check_rmdfiles_missing()
read_yaml("auxiliary/tools_todo.yaml")
read_yaml("auxiliary/tools_todo.yaml") %>%
map(function(x){map(x, function(y){map(y, function(z){list(name = z)})})})
tools_toodo <- read_yaml("auxiliary/tools_todo.yaml")
tools_toodo2 <- map(tools_toodo_yaml, function(x){map(x, function(y){map(y, function(z){list(name = z)})})})
tools_toodo2 %>%
transmute(tool = paste("GeoprocessingTools",toolbox, toolset, tool, sep = "/")) %>%
as.Node(pathName = "tool") %>%
ToListExplicit(unname = TRUE) %>%
diagonalNetwork()
FromListSimple(tools_toodo2,nodeName =  "GeoprocessingTools") %>%
ToListExplicit(unname = TRUE) %>%
diagonalNetwork()
tools_toodo <- read_yaml("auxiliary/tools_todo.yaml")
library(htmlwidgets)
mapview(gemeindegrenzen_zh)
library(mapview)
mapview(gemeindegrenzen_zh)
library(arc2r)
library(sf)
library(raster)
library(mapview)
mapview(gemeindegrenzen_zh)
mapview(gemeindegrenzen_zh) %>%
saveWidget("html/mapviewmap.html")
library(htmlwidgets)
mapview(gemeindegrenzen_zh) %>%
saveWidget("html/mapviewmap.html")
mapviewmap <- mapview(gemeindegrenzen_zh)
saveWidget(mapviewmap, file = "html/mapviewmap.html")
mapviewmap
saveWidget(mapviewmap, file = "mapviewmap.html")
mapviewmap
saveWidget(mapviewmap, file = "interactive.html")
saveWidget(mapviewmap, file = "interactive.html")
mapview::mapshot("html/mapviewmap.html")
mapviewmap <- mapview(gemeindegrenzen_zh) %>%
mapshot("html/mapviewmap.html")
knitr::include_url("html/mapviewmap.html")
# library(htmlwidgets)
mapview(gemeindegrenzen_zh) %>%
mapshot("mapviewmap.html")
data("bezirke")
bezirke
file.copy("mapviewmap.html","docs/mapviewmap.html")
# library(htmlwidgets)
mapview(gemeindegrenzen_zh) %>%
mapshot("mapviewmap.html")
usethis::edit_r_profile()
Sys.getenv("full.name")
usethis::edit_r_profile()
Sys.getenv("usethis.full_name")
Sys.getenv("usethis.full_name")
usethis::edit_r_environ()
Sys.getenv("usethis.full_name")
Sys.getenv("usethis.full_name")
usethis::edit_r_profile()
Sys.setenv(key = "value")
Sys.getenv("key")
usethis::edit_r_profile()
usethis::edit_r_environ()
Sys.getlocale()
Sys.getenv()
Sys.getenv("RSTUDIO_USER_IDENTITY ")
Sys.getenv("RSTUDIO_USER_IDENTITY")
RSTUDIO_USER_IDENTITY <- Sys.getenv("RSTUDIO_USER_IDENTITY")
RSTUDIO_USER_IDENTITY
RSTUDIO_USER_IDENTITY != "rata"
# Point dataset depicting the train stations locations across Switzerland
bahn_haltestelle_ch <- st_read("sample_data/other/Haltestelle_Bahn_CH.shp")
library(sf)
# Point dataset depicting the train stations locations across Switzerland
bahn_haltestelle_ch <- st_read("sample_data/other/Haltestelle_Bahn_CH.shp")
# Dataset depicting Switzerland on canton level
kantonsgebiet <- st_read("sample_data/other/Kantonsgebiet.shp")
tmap_mode(mode = c("plot")) # setting the plotting mode to static -- optimizing the process
library(tmap)
# Point dataset depicting the train stations locations across Switzerland
bahn_haltestelle_ch <- st_read("sample_data/other/Haltestelle_Bahn_CH.shp")
# Dataset depicting Switzerland on canton level
kantonsgebiet <- st_read("sample_data/other/Kantonsgebiet.shp")
tmap_mode(mode = c("plot")) # setting the plotting mode to static -- optimizing the process
tmap_mode(mode = "plot") # setting the plotting mode to static -- optimizing the process
tm_shape(kantonsgebiet) + tm_polygons("#f0f0f0") +
tm_shape(bahn_haltestelle_ch) + tm_dots(col = "#e34a33",size = 0.1, alpha = 0.5) +
tm_shape(kantonsgebiet) + tm_borders(col = "black") + tm_layout(frame = F)
index <- kantonsgebiet$name == "Zürich" |
kantonsgebiet$name == "St. Gallen" |
kantonsgebiet$name == "Thurgau" |
kantonsgebiet$name == "Aargau"
# Selecting the cantons based on the previously generated index
kantons_aOi <- kantonsgebiet[index,]
# Performing the clipping operation
hal_clipped <- st_intersection(kantons_aOi,bahn_haltestelle_ch)
tm_shape(kantons_aOi) + tm_polygons("#f0f0f0") +
tm_shape(hal_clipped) + tm_dots(col = "#e34a33",size = 0.1, alpha = 0.5) +
tm_shape(kantons_aOi) + tm_borders() + tm_layout(frame = F)
# The area of interest from the previous example - section Clip
head(kantons_aOi)
# Merging the four areas into one
aOi_merged <- st_union(kantons_aOi)
tm_shape(aOi_merged) + tm_polygons("#f0f0f0") + tm_layout(frame = F)
kantons_aOi
plot(kantons_aOi)
kantonsgebiet
plot(kantonsgebiet[einwohnerz])
plot(kantonsgebiet["einwohnerz"])
library(sf)
library(arc2r)
data("kantonsgebiet")
# Merging the four areas into one
aOi_merged <- st_union(kantonsgebiet)
tm_shape(aOi_merged) + tm_polygons("#f0f0f0") + tm_layout(frame = F)
plot(kantonsgebiet["name"])
kantonsgebiet_union
# Merging the four areas into one
kantonsgebiet_union <- st_union(kantonsgebiet)
kantonsgebiet_union
plot(kantonsgebiet)
head(kantonsgebiet)
plot(kantonsgebiet_union)
kantonsgebiet
